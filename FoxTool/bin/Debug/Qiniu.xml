<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qiniu</name>
    </assembly>
    <members>
        <member name="T:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest">
            <summary>
            时间戳防盗链 - 请求
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.RawUrl">
            <summary>
            原始链接，host+path+file+query
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.OriginURL">
            <summary>
            仅当以直接传入方式初始化时可用
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.Host">
            <summary>
            URL的Host部分，例如http://cxxx.dyyy.com
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.Path">
            <summary>
            URL的目录部分，例如/DIR1/dir2/
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.File">
            <summary>
            URL中的文件名，例如vodfile.mp4
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.Query">
            <summary>
            URL中的参数部分，例如?v1.1
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.Key">
            <summary>
            QINIU提供的key
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.Timestamp">
            <summary>
            链接失效时刻(时间戳)
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.#ctor">
            <summary>
            初始化(全部为空，需要后续赋值)
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.#ctor(System.String,System.String,System.Int32)">
            <summary>
            初始化，提供原始URL，key，有效时长expire(当前时刻起多少秒以后失效)
            </summary>
            <param name="url">原始URL</param>
            <param name="key">QINIU提供的key</param>
            <param name="expire">有效时长(秒)</param>
        </member>
        <member name="M:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.SetLinkExpire(System.Int32)">
            <summary>
            设置失效时间戳，当前时刻起多少秒以后失效
            </summary>
            <param name="seconds">单位:秒</param>
        </member>
        <member name="M:Qiniu.CDN.Model.TimestampAntiLeechUrlRequest.SetLinkExpire(System.DateTime)">
            <summary>
            设置失效时间戳
            </summary>
            <param name="dt">失效时刻</param>
        </member>
        <member name="T:Qiniu.CDN.Model.RefreshRequest">
            <summary>
            缓存刷新-请求
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshRequest.Urls">
            <summary>
            要预取的单个url列表，总数不超过100条
            单个url，即一个具体的url，例如：http://bar.foo.com/test.zip
            注意：
            请输入资源 url 完整的绝对路径，由 http:// 或 https:// 开始
            资源 url 不支持通配符，例如：不支持 http://www.test.com/abc/*.*
            带参数的 url 刷新，根据其域名缓存配置是否忽略参数缓存决定刷新结果。
            如果配置了时间戳防盗链的资源 url 提交时刷新需要去掉 e 和 token 参数
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshRequest.Dirs">
            <summary>
            要刷新的目录url列表，总数不超过10条；目录dir，即表示一个目录级的url，需要以 / 结尾
            例如：http://bar.foo.com/dir/，
            也支持在尾部使用通配符，例如：http://bar.foo.com/dir/*
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.RefreshRequest.#ctor">
            <summary>
            初始化(所有成员为空，需要后续赋值)
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.RefreshRequest.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            初始化URL列表
            </summary>
            <param name="urls">URL列表</param>
            <param name="dirs">URL目录列表</param>
        </member>
        <member name="M:Qiniu.CDN.Model.RefreshRequest.AddUrls(System.Collections.Generic.IList{System.String})">
            <summary>
            添加URL列表
            </summary>
            <param name="urls">URL列表</param>
        </member>
        <member name="M:Qiniu.CDN.Model.RefreshRequest.AddDirs(System.Collections.Generic.IList{System.String})">
            <summary>
            添加URL目录列表
            </summary>
            <param name="dirs">URL目录列表</param>
        </member>
        <member name="M:Qiniu.CDN.Model.RefreshRequest.ToJsonStr">
            <summary>
            转换到JSON字符串
            </summary>
            <returns>请求内容的JSON字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.Model.RefreshInfo">
            <summary>
            缓存刷新-消息内容结构
            
            在请求成功时 code 为 200，requestId、urlQuotaDay、urlSurplusDay、dirQuotaDay、dirSurplusDay才会有有效值，否则为空。
            在请求失败时 code 为非 200，error 中包含描述信息。
            
            以下是一个返回结果示例
            
            {
                "code":200,
                "error":"success",
                "requestId":"575d1930f9537d3f2600003d",
                "invalidUrls":null,
                "invalidDirs":null,
                "urlQuotaDay":100,
                "urlSurplusDay":99,
                "dirQuotaDay":10,
                "dirSurplusDay":10
            }
            
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshInfo.Code">
            <summary>
            代码 含义 说明
            200	success	成功(OK)
            400031	invalid url 请求中存在无效的 url，请确保 url 格式正确
            400032	invalid host    请求中存在无效的域名，请确保域名格式正确
            400034	refresh url limit error 请求次数超出当日刷新限额
            400036	invalid request id 无效的请求 id
            400037	url has existed url 正在刷新中
            500000	internal error 服务端内部错误，请联系技术支持
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshInfo.Error">
            <summary>
            错误消息(状态码非OK时)
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshInfo.RequestId">
            <summary>
            请求ID(可用于反馈排查)
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshInfo.InvalidUrls">
            <summary>
            非法URL
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshInfo.InvalidDirs">
            <summary>
            非法URL目录
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshInfo.UrlQuotaDay">
            <summary>
            当日URL刷新限额
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshInfo.UrlSurplusaDay">
            <summary>
            当日剩余URL刷新额度
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshInfo.DirQuotaDay">
            <summary>
            当日URL目录刷新限额
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshInfo.DirSurplusaDay">
            <summary>
            当日剩余URL目录刷新额度
            </summary>
        </member>
        <member name="T:Qiniu.CDN.Model.RefreshResult">
            <summary>
            缓存刷新-结果
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.RefreshResult.Result">
            <summary>
            获取缓存刷新信息
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.RefreshResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.Model.PrefetchRequest">
            <summary>
            文件预取-请求
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.PrefetchRequest.Urls">
            <summary>
            要预取的单个url列表，总数不超过100条
            单个url，即一个具体的url，例如：http://bar.foo.com/test.zip
            注意：
            请输入资源 url 完整的绝对路径，由 http:// 或 https:// 开始
            资源 url 不支持通配符，例如：不支持 http://www.test.com/abc/*.*
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.PrefetchRequest.#ctor">
            <summary>
            初始化(URL列表为空，需要后续赋值)
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.PrefetchRequest.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            初始化(URL列表)
            </summary>
            <param name="urls">URL列表</param>
        </member>
        <member name="M:Qiniu.CDN.Model.PrefetchRequest.AddUrls(System.Collections.Generic.IList{System.String})">
            <summary>
            添加要查询的URL
            </summary>
            <param name="urls">URL列表</param>
        </member>
        <member name="M:Qiniu.CDN.Model.PrefetchRequest.ToJsonStr">
            <summary>
            转换到JSON字符串
            </summary>
            <returns>请求内容的JSON字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.Model.PrefetchInfo">
            <summary>
            文件预取-消息内容结构
            
            在请求成功时 code 为 200，requestId、quotaDay、surplusDay 才会有有效值，否则为空。
            在请求失败时 code 为非 200，error 中包含描述信息。
            
            以下是一个返回结果示例
            
            {
                "code":200,
                "error":"success",
                "requestId":"577471ace3ab3a030c058972",
                "invalidUrls":null,
                "quotaDay":100,
                "surplusDay":99
            }
            
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.PrefetchInfo.Code">
            <summary>
            代码	含义	说明
            /// 200	success	成功(OK)
            400031	invalid url 请求中存在无效的 url，请确保提交的 url 格式正确
            400032	invalid host    请求中存在无效的域名，请确保域名格式正确
            400033	prefetch url limit error    请求次数超出当日预取限额
            400036	invalid request id 无效的请求 id
            400037	url has existed url 正在预取中
            500000	internal error 服务端内部错误，请联系技术支持
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.PrefetchInfo.Error">
            <summary>
            错误消息(状态码非OK时)
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.PrefetchInfo.RequestId">
            <summary>
            请求ID(可用于反馈排查)
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.PrefetchInfo.InvalidUrls">
            <summary>
            非法URL
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.PrefetchInfo.QuotaDay">
            <summary>
            当日限额
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.PrefetchInfo.SurplusaDay">
            <summary>
            当日剩余额度
            </summary>
        </member>
        <member name="T:Qiniu.CDN.Model.PrefetchResult">
            <summary>
            文件预取-结果
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.PrefetchResult.Result">
            <summary>
            获取文件预取信息
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.PrefetchResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.Model.BandwidthRequest">
            <summary>
            查询带宽-请求
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandwidthRequest.StartDate">
            <summary>
            起始日期，例如2016-09-01
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandwidthRequest.EndDate">
            <summary>
            结束日期，例如2016-09-10
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandwidthRequest.Granularity">
            <summary>
            时间粒度(取值：5min ／ hour ／day)
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandwidthRequest.Domains">
            <summary>
            域名列表，以西文半角分号分割
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.BandwidthRequest.#ctor">
            <summary>
            初始化(所有成员为空，需要后续赋值)
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.BandwidthRequest.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化所有成员
            </summary>
            <param name="startDate">起始日期</param>
            <param name="endDate">结束日期</param>
            <param name="granularity">时间粒度</param>
            <param name="domains">域名列表</param>
        </member>
        <member name="M:Qiniu.CDN.Model.BandwidthRequest.ToJsonStr">
            <summary>
            转换到JSON字符串
            </summary>
            <returns>请求内容的JSON字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.Model.BandwidthInfo">
            <summary>
            带宽-消息内容结构
            说明：
            1.返回的数据包含开始日期和结束日期
            2.带宽的单位为 bps
            3.数据(data)只包含有流量的域名
            以下是一个返回结果示例
            
            200 OK HTTP/1.1 
            {
                "code": 200,
                "error": "",
                "time": ["2016-07-01 00:00:00","2016-07-01 00:05:00", ...],
                "data": {
                    "a.com": {
                        "china": [8888, 9999, 10000, ...],
                        "oversea": [3333, 4444, 5000, ...],
                        },
                    "b.com": {
                        "china": [8888, 9999, 10000, ...],
                        "oversea": [3333, 4444, 5000, ...],
                        }
                    }
            }
            
            另请参阅 http://developer.qiniu.com/article/fusion/api/traffic-bandwidth.html#batch-bandwidth
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandwidthInfo.Code">
            <summary>
            代码 含义 说明
            200	success	成功(OK)
            400032	invalid host    请求中存在无效的域名，请确保域名格式正确
            400080	invalid start time 开始时间格式错误
            400081	invalid end time 截止时间格式错误
            400082	invalid time range 时间范围错误，请确保开始时间早于结束时间，且时间范围不超过 30 天
            500000	internal error 服务端内部错误，请联系技术支持
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandwidthInfo.Error">
            <summary>
            错误消息(状态码非OK时)
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandwidthInfo.Time">
            <summary>
            时间点列表
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandwidthInfo.Data">
            <summary>
            带宽数居(与时间点列表对应)
            数据内容请参见该类型说明
            </summary>
        </member>
        <member name="T:Qiniu.CDN.Model.BandWidthData">
            <summary>
            带宽-数据内容
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandWidthData.China">
            <summary>
            国内带宽数据
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandWidthData.Oversea">
            <summary>
            海外带宽数据
            </summary>
        </member>
        <member name="T:Qiniu.CDN.Model.BandwidthResult">
            <summary>
            查询带宽-结果
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.BandwidthResult.Result">
            <summary>
            获取带宽信息
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.BandwidthResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.Model.FluxRequest">
            <summary>
            查询流量-请求
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxRequest.StartDate">
            <summary>
            起始日期，例如2016-09-01
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxRequest.EndDate">
            <summary>
            结束日期，例如2016-09-10
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxRequest.Granularity">
            <summary>
            时间粒度((取值：5min ／ hour ／day))
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxRequest.Domains">
            <summary>
            域名列表，以西文半角分号分割
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.FluxRequest.#ctor">
            <summary>
            初始化(所有成员为空，需要后续赋值)
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.FluxRequest.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化所有成员
            </summary>
            <param name="startDate">起始日期</param>
            <param name="endDate">结束日期</param>
            <param name="granularity">时间粒度</param>
            <param name="domains">域名列表</param>
        </member>
        <member name="M:Qiniu.CDN.Model.FluxRequest.ToJsonStr">
            <summary>
            转换到JSON字符串
            </summary>
            <returns>请求内容的JSON字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.Model.FluxInfo">
            <summary>
            流量-消息内容结构
            说明：
            1.返回的数据包含开始日期和结束日期
            2.带宽的单位为 byte
            3.数据(data)只包含有流量的域名
            
            以下是一个返回结果示例
            
            {
                "code": 200,
                "error": "",
                "time": ["2016-07-01 00:00:00","2016-07-01 00:05:00", ...],
                "data": {
                    "a.com": {
                        "china": [8888, 9999, 10000, ...],
                        "oversea": [3333, 4444, 5000, ...],
                        },
                    "b.com": {
                        "china": [8888, 9999, 10000, ...],
                        "oversea": [3333, 4444, 5000, ...],
                        }
                    }
            }
            
            另请参阅 http://developer.qiniu.com/article/fusion/api/traffic-bandwidth.html#batch-flux
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxInfo.Code">
            <summary>
            代码 含义 说明
            200	success	成功(OK)
            400032	invalid host    请求中存在无效的域名，请确保域名格式正确
            400080	invalid start time 开始时间格式错误
            400081	invalid end time 截止时间格式错误
            400082	invalid time range 时间范围错误，请确保开始时间早于结束时间，且时间范围不超过 30 天
            500000	internal error 服务端内部错误，请联系技术支持
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxInfo.Error">
            <summary>
            错误消息(状态码非OK时)
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxInfo.Time">
            <summary>
            时间点列表
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxInfo.Data">
            <summary>
            流量数居(与时间点列表对应)
            </summary>
        </member>
        <member name="T:Qiniu.CDN.Model.FluxInfo.FluxData">
            <summary>
            流量-数据内容
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxInfo.FluxData.China">
            <summary>
            国内流量数据
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxInfo.FluxData.Oversea">
            <summary>
            海外流量数据
            </summary>
        </member>
        <member name="T:Qiniu.CDN.Model.FluxResult">
            <summary>
            查询流量-结果
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.FluxResult.Result">
            <summary>
            获取流量信息
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.FluxResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.Model.LogListRequest">
            <summary>
            查询日志-请求
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogListRequest.Day">
            <summary>
            日期，例如 2016-09-01
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogListRequest.Domains">
            <summary>
            域名列表，以西文半角分号分割
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.LogListRequest.#ctor">
            <summary>
            初始化(所有成员为空，需要后续赋值)
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.LogListRequest.#ctor(System.String,System.String)">
            <summary>
            初始化所有成员
            </summary>
            <param name="day">日期</param>
            <param name="domains">域名列表(多个域名以;分隔的字符串)</param>
        </member>
        <member name="M:Qiniu.CDN.Model.LogListRequest.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            初始化所有成员
            </summary>
            <param name="day">日期</param>
            <param name="domains">域名列表</param>
        </member>
        <member name="M:Qiniu.CDN.Model.LogListRequest.ToJsonStr">
            <summary>
            转换到JSON字符串
            </summary>
            <returns>请求内容的JSON字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.Model.LogListInfo">
            <summary>
            日志-消息内容结构
            
            以下是一个返回结果示例
            
            {
                "data": {
                        "log-test1.SOME_TEST.com": [
                            {
                                "name":"log-test1.SOME_TEST.com_2016-07-01-00_00.gz",
                                "size": 88490306,
                                "mtime": 1466274440,
                                "url": "http://FUSION_LOG_DOWNLOAD_URL1"
                             }
                         ],
                         "log-test2.SOME_TEST.com": [
                            {
                                "name":"log-test2.SOME_TEST.com_2016-07-01-00_00.gz",
                                "size": 73280873,
                                "mtime": 1466273259,
                                "url": "http://FUSION_LOG_DOWNLOAD_URL2"
                            }
                        ]
                    }
            }
            
            /// </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogListInfo.Code">
            <summary>
            代码 含义 说明
            200	success	成功(OK)
            400	invalid params	请求参数格式错误
            401	bad token   认证授权失败（包括密钥信息不正确；数字签名错误；授权已超时）
            400032	invalid host    请求中存在无效的域名，请确保域名格式正确
            500000	internal error 服务器内部错误
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogListInfo.Error">
            <summary>
            错误消息(状态码非OK时)
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogListInfo.Data">
            <summary>
            日志信息(与域名列表对应)
            </summary>
        </member>
        <member name="T:Qiniu.CDN.Model.LogData">
            <summary>
            日志信息内容
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogData.Name">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogData.Size">
            <summary>
            文件大小，单位为 Byte
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogData.Mtime">
            <summary>
            文件修改时间，Unix 时间戳
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogData.Url">
            <summary>
            日志下载链接
            </summary>
        </member>
        <member name="T:Qiniu.CDN.Model.LogListResult">
            <summary>
            查询日志-结果
            </summary>
        </member>
        <member name="P:Qiniu.CDN.Model.LogListResult.Result">
            <summary>
            获取日志列表信息
            </summary>
        </member>
        <member name="M:Qiniu.CDN.Model.LogListResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.CDN.CdnManager">
            <summary>
            融合CDN加速-功能模块： 缓存刷新、文件预取、流量/带宽查询、日志查询、时间戳防盗链
            另请参阅 http://developer.qiniu.com/article/index.html#fusion-api-handbook
            关于时间戳防盗链可参阅 https://support.qiniu.com/question/195128
            </summary>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.#ctor(Qiniu.Util.Mac)">
            <summary>
            初始化
            </summary>
            <param name="mac">账号(密钥)</param>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.RefreshUrlsAndDirs(Qiniu.CDN.Model.RefreshRequest)">
            <summary>
            缓存刷新-刷新URL和URL目录
            </summary>
            <param name="request">“缓存刷新”请求，详情请参见该类型的说明</param>
            <returns>缓存刷新的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.RefreshUrls(System.String[])">
            <summary>
            缓存刷新-刷新URL
            </summary>
            <param name="urls">要刷新的URL列表</param>
            <returns>缓存刷新的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.RefreshDirs(System.String[])">
            <summary>
            缓存刷新-刷新URL目录
            </summary>
            <param name="dirs">要刷新的URL目录列表</param>
            <returns>缓存刷新的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.RefreshUrlsAndDirs(System.String[],System.String[])">
            <summary>
            缓存刷新-刷新URL和URL目录
            </summary>
            <param name="urls">要刷新的URL列表</param>
            <param name="dirs">要刷新的URL目录列表</param>
            <returns>缓存刷新的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.PrefetchUrls(Qiniu.CDN.Model.PrefetchRequest)">
            <summary>
            文件预取
            </summary>
            <param name="request">“文件预取”请求，详情请参阅该类型的说明</param>
            <returns>文件预取的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.PrefetchUrls(System.String[])">
            <summary>
            文件预取
            </summary>
            <param name="urls">待预取的文件URL列表</param>
            <returns>文件预取的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetBandwidthData(Qiniu.CDN.Model.BandwidthRequest)">
            <summary>
            批量查询cdn带宽
            </summary>
            <param name="request">“带宽查询”请求，详情请参阅该类型的说明</param>
            <returns>带宽查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetBandwidthData(System.String[],System.String,System.String,System.String)">
            <summary>
            批量查询cdn带宽
            </summary>
            <param name="domains">域名列表</param>
            <param name="startDate">起始日期，如2017-01-01</param>
            <param name="endDate">结束日期，如2017-01-02</param>
            <param name="granularity">时间粒度，如day</param>
            <returns>带宽查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetFluxData(Qiniu.CDN.Model.FluxRequest)">
            <summary>
            批量查询cdn流量
            </summary>
            <param name="request">“流量查询”请求，详情请参阅该类型的说明</param>
            <returns>流量查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetFluxData(System.String[],System.String,System.String,System.String)">
            <summary>
            批量查询cdn流量
            </summary>
            <param name="domains">域名列表</param>
            <param name="startDate">起始日期，如2017-01-01</param>
            <param name="endDate">结束日期，如2017-01-02</param>
            <param name="granularity">时间粒度，如day</param>
            <returns>流量查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetCdnLogList(Qiniu.CDN.Model.LogListRequest)">
            <summary>
            查询日志列表，获取日志的下载外链
            </summary>
            <param name="request">“日志查询”请求，详情请参阅该类型的说明</param>
            <returns>日志查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetCdnLogList(System.String[],System.String)">
            <summary>
            查询日志列表，获取日志的下载外链
            </summary>
            <param name="domains">域名列表</param>
            <param name="date">指定日期，如2017-01-01</param>
            <returns>日志查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.RefreshUrlsAndDirsAsync(Qiniu.CDN.Model.RefreshRequest)">
            <summary>
            [异步async]缓存刷新-刷新URL和URL目录
            </summary>
            <param name="request">“缓存刷新”请求，详情请参见该类型的说明</param>
            <returns>缓存刷新的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.RefreshUrlsAsync(System.String[])">
            <summary>
            [异步async]缓存刷新-刷新URL
            </summary>
            <param name="urls">要刷新的URL列表</param>
            <returns>缓存刷新的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.RefreshDirsAsync(System.String[])">
            <summary>
            [异步async]缓存刷新-刷新URL目录
            </summary>
            <param name="dirs">要刷新的URL目录列表</param>
            <returns>缓存刷新的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.RefreshUrlsAndDirsAsync(System.String[],System.String[])">
            <summary>
            [异步async]缓存刷新-刷新URL和URL目录
            </summary>
            <param name="urls">要刷新的URL列表</param>
            <param name="dirs">要刷新的URL目录列表</param>
            <returns>缓存刷新的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.PrefetchUrlsAsync(Qiniu.CDN.Model.PrefetchRequest)">
            <summary>
            [异步async]文件预取
            </summary>
            <param name="request">“文件预取”请求，详情请参阅该类型的说明</param>
            <returns>文件预取的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.PrefetchUrlsAsync(System.String[])">
            <summary>
            [异步async]文件预取
            </summary>
            <param name="urls">待预取的文件URL列表</param>
            <returns>文件预取的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetBandwidthDataAsync(Qiniu.CDN.Model.BandwidthRequest)">
            <summary>
            [异步async]批量查询cdn带宽
            </summary>
            <param name="request">“带宽查询”请求，详情请参阅该类型的说明</param>
            <returns>带宽查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetBandwidthDataAsync(System.String[],System.String,System.String,System.String)">
            <summary>
            [异步async]批量查询cdn带宽
            </summary>
            <param name="domains">域名列表</param>
            <param name="startDate">起始日期，如2017-01-01</param>
            <param name="endDate">结束日期，如2017-01-02</param>
            <param name="granularity">时间粒度，如day</param>
            <returns>带宽查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetFluxDataAsync(Qiniu.CDN.Model.FluxRequest)">
            <summary>
            [异步async]批量查询cdn流量
            </summary>
            <param name="request">“流量查询”请求，详情请参阅该类型的说明</param>
            <returns>流量查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetFluxDataAsync(System.String[],System.String,System.String,System.String)">
            <summary>
            [异步async]批量查询cdn流量
            </summary>
            <param name="domains">域名列表</param>
            <param name="startDate">起始日期，如2017-01-01</param>
            <param name="endDate">结束日期，如2017-01-02</param>
            <param name="granularity">时间粒度，如day</param>
            <returns>流量查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetCdnLogListAsync(Qiniu.CDN.Model.LogListRequest)">
            <summary>
            [异步async]查询日志列表，获取日志的下载外链
            </summary>
            <param name="request">“日志查询”请求，详情请参阅该类型的说明</param>
            <returns>日志查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.GetCdnLogListAsync(System.String[],System.String)">
            <summary>
            [异步async]查询日志列表，获取日志下载外链
            </summary>
            <param name="domains">域名列表</param>
            <param name="date">指定日期，如2017-01-01</param>
            <returns>日志查询的结果</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.CreateTimestampAntiLeechUrl(Qiniu.CDN.Model.TimestampAntiLeechUrlRequest)">
            <summary>
            时间戳防盗链
            另请参阅https://support.qiniu.com/question/195128
            </summary>
            <param name="request">“时间戳防盗链”请求，详情请参阅该类型的说明</param>
            <returns>时间戳防盗链接</returns>
        </member>
        <member name="M:Qiniu.CDN.CdnManager.CreateTimestampAntiLeechUrl(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            时间戳防盗链
            </summary>
            <param name="host">主机，如http://domain.com</param>
            <param name="path">路径，如/dir1/dir2/</param>
            <param name="fileName">文件名，如1.jpg</param>
            <param name="query">请求参数，如?v=1.1</param>
            <param name="encryptKey">后台提供的key</param>
            <param name="expireInSeconds">链接有效时长</param>
            <returns>时间戳防盗链接</returns>
        </member>
        <member name="T:Qiniu.JSON.IJsonDeserializer">
            <summary>
            JSON反序列化接口
            </summary>
        </member>
        <member name="M:Qiniu.JSON.IJsonDeserializer.Deserialize``1(System.String,``0@)">
            <summary>
            JSON反序列化方法
            </summary>
            <param name="str">输入JSON编码的字符串</param>
            <param name="obj">输出目标对象</param>
            <returns>成功时返回true，否则false</returns>
        </member>
        <member name="T:Qiniu.JSON.IJsonSerializer">
            <summary>
            JSON序列化接口
            </summary>
        </member>
        <member name="M:Qiniu.JSON.IJsonSerializer.Serialize``1(``0)">
            <summary>
            JSON序列化方法
            </summary>
            <param name="obj">输入的对象</param>
            <returns>JSON编码的字符串</returns>
        </member>
        <member name="T:Qiniu.JSON.JsonHelper">
            <summary>
            公用JSON序列化、反序列化
            </summary>
        </member>
        <member name="F:Qiniu.JSON.JsonHelper.JsonSerializer">
            <summary>
            请设置您的JSON序列化器
            </summary>
        </member>
        <member name="F:Qiniu.JSON.JsonHelper.JsonDeserializer">
            <summary>
            请设置您的JSON反序列化器
            </summary>
        </member>
        <member name="M:Qiniu.JSON.JsonHelper.Serialize``1(``0)">
            <summary>
            JSON序列化
            </summary>
        </member>
        <member name="M:Qiniu.JSON.JsonHelper.Deserialize``1(System.String,``0@)">
            <summary>
            JSON反序列化
            </summary>
        </member>
        <member name="T:Qiniu.JSON.JsonPropertyAttribute">
            <summary>
            指示JSON序列化时的属性名称
            </summary>
        </member>
        <member name="P:Qiniu.JSON.JsonPropertyAttribute.PropertyName">
            <summary>
            设置JSON序列化的属性名称
            </summary>
        </member>
        <member name="M:Qiniu.JSON.JsonPropertyAttribute.#ctor">
            <summary>
            未设置
            </summary>
        </member>
        <member name="M:Qiniu.JSON.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            设置JSON序列化的属性名称
            </summary>
            <param name="propertyName">设置JSON序列化的属性名称</param>
        </member>
        <member name="T:Qiniu.JSON.NewtonsoftJsonDeserializer">
            <summary>
            默认的JSON反序列化：基于Json.NET实现
            </summary>
        </member>
        <member name="M:Qiniu.JSON.NewtonsoftJsonDeserializer.Deserialize``1(System.String,``0@)">
            <summary>
            实现接口：JSON反序列化方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Qiniu.JSON.NewtonsoftJsonSerializer">
            <summary>
            默认的JSON序列化：基于Json.NET实现
            </summary>
        </member>
        <member name="M:Qiniu.JSON.NewtonsoftJsonSerializer.Serialize``1(``0)">
            <summary>
            实现接口：JSON序列化方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Qiniu.Common.Config">
            <summary>
            配置信息，主要包括Zone配置(另请参阅Zone模块)
            目前已支持的机房包括：
            华东(CN_East), 华北(CN_North), 华南(CN_South), 北美(US_North)
            默认设置为华东机房(CN_East) 
            </summary>
        </member>
        <member name="F:Qiniu.Common.Config.ZONE">
            <summary>
            空间所在的区域(Zone)
            </summary>
        </member>
        <member name="F:Qiniu.Common.Config.FUSION_API_HOST">
            <summary>
            Fusion API Host
            </summary>
        </member>
        <member name="F:Qiniu.Common.Config.DFOP_API_HOST">
            <summary>
            DFOP API Host
            </summary>
        </member>
        <member name="F:Qiniu.Common.Config.PILI_API_HOST">
            <summary>
            PILI API Host
            </summary>
        </member>
        <member name="M:Qiniu.Common.Config.SetZone(Qiniu.Common.ZoneID,System.Boolean)">
            <summary>
            根据Zone配置对应参数(RS_HOST,API_HOST等)
            </summary>
            <param name="zoneId">ZoneID</param>
            <param name="useHTTPS">是否使用HTTPS</param>
        </member>
        <member name="M:Qiniu.Common.Config.AutoZone(System.String,System.String,System.Boolean)">
            <summary>
            自动配置Zone
            </summary>
            <param name="accessKey">AccessKey</param>
            <param name="bucket">空间名称</param>
            <param name="useHTTPS">是否使用HTTPS</param>
        </member>
        <member name="M:Qiniu.Common.Config.AutoZoneAsync(System.String,System.String,System.Boolean)">
            <summary>
            自动配置Zone
            </summary>
            <param name="accessKey">AccessKey</param>
            <param name="bucket">空间名称</param>
            <param name="useHTTPS">是否使用HTTPS</param>
        </member>
        <member name="T:Qiniu.Common.ZoneID">
            多机房-自定义区域编号
            华东(CN_East)
            华北(CN_North)
            华南(CN_South)
            北美(US_North)
        </member>
        <member name="F:Qiniu.Common.ZoneID.CN_East">
            <summary>
            华东
            </summary>
        </member>
        <member name="F:Qiniu.Common.ZoneID.CN_North">
            <summary>
            华北
            </summary>
        </member>
        <member name="F:Qiniu.Common.ZoneID.CN_South">
            <summary>
            华南
            </summary>
        </member>
        <member name="F:Qiniu.Common.ZoneID.US_North">
            <summary>
            北美
            </summary>
        </member>
        <member name="F:Qiniu.Common.ZoneID.Default">
            <summary>
            默认-华东
            </summary>
        </member>
        <member name="F:Qiniu.Common.ZoneID.Invalid">
            <summary>
            未定义,比如QueryZone查询出错时设置为此值
            </summary>
        </member>
        <member name="T:Qiniu.Common.Zone">
            <summary>
            目前已支持的区域：华东/华北/华南/北美
            </summary>
        </member>
        <member name="P:Qiniu.Common.Zone.RsHost">
            <summary>
            资源管理
            </summary>
        </member>
        <member name="P:Qiniu.Common.Zone.RsfHost">
            <summary>
            源列表
            </summary>
        </member>
        <member name="P:Qiniu.Common.Zone.ApiHost">
            <summary>
            数据处理
            </summary>
        </member>
        <member name="P:Qiniu.Common.Zone.IovipHost">
            <summary>
            镜像刷新、资源抓取
            </summary>
        </member>
        <member name="P:Qiniu.Common.Zone.UpHost">
            <summary>
            资源上传
            </summary>
        </member>
        <member name="P:Qiniu.Common.Zone.UploadHost">
            <summary>
            CDN加速
            </summary>
        </member>
        <member name="M:Qiniu.Common.Zone.GetZone(Qiniu.Common.ZoneID,System.Boolean)">
            <summary>
            根据ZoneID取得对应Zone设置
            </summary>
            <param name="zoneId">区域编号</param>
            <param name="useHTTPS">是否使用HTTPS</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Common.Zone.ZONE_CN_East(System.Boolean)">
            <summary>
            华东
            xx-(NULL)
            </summary>
            <param name="useHTTPS">是否使用HTTPS</param>
        </member>
        <member name="M:Qiniu.Common.Zone.ZONE_CN_North(System.Boolean)">
            <summary>
            华北
            xx-z1
            </summary>
            <param name="useHTTPS">是否使用HTTPS</param>
        </member>
        <member name="M:Qiniu.Common.Zone.ZONE_CN_South(System.Boolean)">
            <summary>
            华南
            xx-z2
            </summary>
            <param name="useHTTPS">是否使用HTTPS</param>
        </member>
        <member name="M:Qiniu.Common.Zone.ZONE_US_North(System.Boolean)">
            <summary>
            北美
            xx-na0
            </summary>
            <param name="useHTTPS">是否使用HTTPS</param>
            <returns></returns>
        </member>
        <member name="T:Qiniu.Common.ZoneHelper">
            <summary>
            Zone辅助类，查询及配置Zone
            </summary>
        </member>
        <member name="F:Qiniu.Common.ZoneHelper.ZONE_DICT">
            <summary>
            Zone
            不同区域upHost分别唯一，据此确定对应的Zone
            </summary>
        </member>
        <member name="M:Qiniu.Common.ZoneHelper.QueryZone(System.String,System.String)">
            <summary>
            从uc.qbox.me查询得到回复后，解析出upHost,然后根据upHost确定Zone
            </summary>
            <param name="accessKey">AccessKek</param>
            <param name="bucket">空间名称</param>
        </member>
        <member name="M:Qiniu.Common.ZoneHelper.QueryZoneAsync(System.String,System.String)">
            <summary>
            从uc.qbox.me查询得到回复后，解析出upHost,然后根据upHost确定Zone
            </summary>
            <param name="accessKey">AccessKek</param>
            <param name="bucket">空间名称</param>
        </member>
        <member name="T:Qiniu.Common.ZoneInfo">
            <summary>
            从uc.qbox.me返回的消息
            </summary>
        </member>
        <member name="T:Qiniu.Common.OBulk">
            <summary>
            包含uploadHost和iovip等
            </summary>
        </member>
        <member name="T:Qiniu.Util.Auth">
            <summary>
            Authentication/Authorization
            </summary>
        </member>
        <member name="M:Qiniu.Util.Auth.#ctor(Qiniu.Util.Mac)">
            <summary>
            一般初始化
            </summary>
            <param name="mac">账号(密钥)</param>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateManageToken(System.String,System.Byte[])">
            <summary>
            生成管理凭证
            有关管理凭证请参阅
            http://developer.qiniu.com/article/developer/security/access-token.html
            </summary>
            <param name="url">请求的URL</param>
            <param name="body">请求的主体内容</param>
            <returns>生成的管理凭证</returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateManageToken(System.String)">
            <summary>
            生成管理凭证-不包含body
            </summary>
            <param name="url">请求的URL</param>
            <returns>生成的管理凭证</returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateUploadToken(System.String)">
            <summary>
            生成上传凭证
            </summary>
            <param name="jsonStr">上传策略对应的JSON字符串</param>
            <returns>生成的上传凭证</returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateDownloadToken(System.String)">
            <summary>
            生成下载凭证
            </summary>
            <param name="url">原始链接</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateStreamPublishToken(System.String)">
            <summary>
            生成推流地址使用的凭证
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateStreamManageToken(System.String)">
            <summary>
            生成流管理凭证
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateManageToken(Qiniu.Util.Mac,System.String,System.Byte[])">
            <summary>
            生成管理凭证
            有关管理凭证请参阅
            http://developer.qiniu.com/article/developer/security/access-token.html
            </summary>
            <param name="mac">账号(密钥)</param>
            <param name="url">访问的URL</param>
            <param name="body">请求的body</param>
            <returns>生成的管理凭证</returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateManageToken(Qiniu.Util.Mac,System.String)">
            <summary>
            生成管理凭证-不包含body
            </summary>
            <param name="mac">账号(密钥)</param>
            <param name="url">请求的URL</param>
            <returns>生成的管理凭证</returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateUploadToken(Qiniu.Util.Mac,System.String)">
            <summary>
            生成上传凭证
            </summary>
            <param name="mac">账号(密钥)</param>
            <param name="jsonBody">上传策略JSON串</param>
            <returns>生成的上传凭证</returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateDownloadToken(Qiniu.Util.Mac,System.String)">
            <summary>
            生成下载凭证
            </summary>
            <param name="mac">账号(密钥)</param>
            <param name="url">原始链接</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateStreamPublishToken(Qiniu.Util.Mac,System.String)">
            <summary>
            生成推流地址使用的凭证
            </summary>
            <param name="mac">账号(密钥)</param>
            <param name="path">URL路径</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Auth.CreateStreamManageToken(Qiniu.Util.Mac,System.String)">
            <summary>
            生成流管理凭证
            </summary>
            <param name="mac">账号(密钥)</param>
            <param name="data">待签数据</param>
            <returns></returns>
        </member>
        <member name="T:Qiniu.Util.LabMD5">
            <summary>
            MD5算法的3rdParty实现
            参考https://github.com/Dozer74/MD5
            </summary>
        </member>
        <member name="M:Qiniu.Util.LabMD5.BitHelper.RotateLeft(System.UInt32,System.UInt16)">
            <summary>
            rotate
            </summary>
            <param name="num">num</param>
            <param name="shift">shift</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.LabMD5.BitHelper.ReverseByte(System.UInt32)">
            <summary>
            reverse
            </summary>
        </member>
        <member name="F:Qiniu.Util.LabMD5.T">
            <summary>
            table 4294967296*sin(i)
            </summary>
        </member>
        <member name="M:Qiniu.Util.LabMD5.ComputeHash(System.Byte[])">
            <summary>
            ComputeHash
            </summary>
        </member>
        <member name="T:Qiniu.Util.Mac">
            <summary>
            账户访问控制(密钥)
            </summary>
        </member>
        <member name="P:Qiniu.Util.Mac.AccessKey">
            <summary>
            密钥-AccessKey
            </summary>
        </member>
        <member name="P:Qiniu.Util.Mac.SecretKey">
            <summary>
            密钥-SecretKey
            </summary>
        </member>
        <member name="M:Qiniu.Util.Mac.#ctor(System.String,System.String)">
            <summary>
            初始化密钥AK/SK
            </summary>
            <param name="accessKey">AccessKey</param>
            <param name="secretKey">SecretKey</param>
        </member>
        <member name="T:Qiniu.Util.Signature">
            <summary>
            签名/加密
            特别注意，不同平台使用的Cryptography可能略有不同，使用中如有遇到问题，请反馈
            提交您的issue到 https://github.com/qiniu/csharp-sdk
            </summary>
        </member>
        <member name="M:Qiniu.Util.Signature.#ctor(Qiniu.Util.Mac)">
            <summary>
            初始化
            </summary>
            <param name="mac">账号(密钥)</param>
        </member>
        <member name="M:Qiniu.Util.Signature.Sign(System.Byte[])">
            <summary>
            签名-字节数据
            </summary>
            <param name="data">待签名的数据</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Signature.Sign(System.String)">
            <summary>
            签名-字符串数据
            </summary>
            <param name="str">待签名的数据</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Signature.SignWithData(System.Byte[])">
            <summary>
            附带数据的签名
            </summary>
            <param name="data">待签名的数据</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Signature.SignWithData(System.String)">
            <summary>
            附带数据的签名
            </summary>
            <param name="str">待签名的数据</param>
            <returns>签名结果</returns>
        </member>
        <member name="M:Qiniu.Util.Signature.SignRequest(System.String,System.Byte[])">
            <summary>
            HTTP请求签名
            </summary>
            <param name="url">请求目标的URL</param>
            <param name="body">请求的主体数据</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Signature.SignRequest(System.String,System.String)">
            <summary>
            HTTP请求签名
            </summary>
            <param name="url">请求目标的URL</param>
            <param name="body">请求的主体数据</param>
            <returns></returns>
        </member>
        <member name="T:Qiniu.Util.UnixTimestamp">
            <summary>
            时间戳与日期时间转换
            </summary>
        </member>
        <member name="F:Qiniu.Util.UnixTimestamp.dtBase">
            <summary>
            基准时间
            </summary>
        </member>
        <member name="F:Qiniu.Util.UnixTimestamp.TICK_BASE">
            <summary>
            时间戳末尾7位(补0或截断)
            </summary>
        </member>
        <member name="M:Qiniu.Util.UnixTimestamp.GetUnixTimestamp(System.Int64)">
            <summary>
            从现在(调用此函数时刻)起若干秒以后那个时间点的时间戳
            </summary>
            <param name="secondsAfterNow">从现在起多少秒以后</param>
            <returns>Unix时间戳</returns>
        </member>
        <member name="M:Qiniu.Util.UnixTimestamp.ConvertToTimestamp(System.DateTime)">
            <summary>
            日期时间转换为时间戳
            </summary>
            <param name="dt">日期时间</param>
            <returns>时间戳</returns>
        </member>
        <member name="M:Qiniu.Util.UnixTimestamp.ConvertToDateTime(System.String)">
            <summary>
            从UNIX时间戳转换为DateTime
            </summary>
            <param name="timestamp">时间戳字符串</param>
            <returns>日期时间</returns>
        </member>
        <member name="M:Qiniu.Util.UnixTimestamp.ConvertToDateTime(System.Int64)">
            <summary>
            从UNIX时间戳转换为DateTime
            </summary>
            <param name="timestamp">时间戳</param>
            <returns>日期时间</returns>
        </member>
        <member name="T:Qiniu.Util.UrlHelper">
            <summary>
            URL辅助工具(RegExp)
            </summary>
        </member>
        <member name="M:Qiniu.Util.UrlHelper.IsValidUrl(System.String)">
            <summary>
            是否合法URL
            </summary>
            <param name="_url">待判断的url</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.UrlHelper.IsNormalUrl(System.String)">
            <summary>
            是否一般URL(不包含？等后缀参数)
            </summary>
            <param name="_url">待判断的url</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.UrlHelper.IsValidDir(System.String)">
            <summary>
            是否合法URL目录
            </summary>
            <param name="_dir">待判断的url目录</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.UrlHelper.GetNormalUrl(System.String)">
            <summary>
            从原始URL转换为一般URL(根据需要截断)
            </summary>
            <param name="_url">待转换的url</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.UrlHelper.UrlSplit(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            URL分析，拆分出Host,Path,File,Query各个部分
            </summary>
            <param name="url">原始URL</param>
            <param name="host">host部分</param>
            <param name="path">path部分</param>
            <param name="file">文件名</param>
            <param name="query">参数</param>
        </member>
        <member name="T:Qiniu.Util.Base64">
            <summary>
            Base64 编码/解码
            </summary>
        </member>
        <member name="M:Qiniu.Util.Base64.UrlSafeBase64Encode(System.String)">
            <summary>
            获取字符串Url安全Base64编码值
            </summary>
            <param name="text">源字符串</param>
            <returns>已编码字符串</returns>
        </member>
        <member name="M:Qiniu.Util.Base64.UrlSafeBase64Encode(System.Byte[])">
            <summary>
            URL安全的base64编码
            </summary>
            <param name="data">需要编码的字节数据</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.Base64.UrlSafeBase64Encode(System.String,System.String)">
            <summary>
            bucket:key 编码
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>编码</returns>
        </member>
        <member name="M:Qiniu.Util.Base64.UrlsafeBase64Decode(System.String)">
            <summary>
            Base64解码
            </summary>
            <param name="text">待解码的字符串</param>
            <returns>已解码字符串</returns>
        </member>
        <member name="T:Qiniu.Util.CRC32">
            <summary>
            CRC32计算器
            </summary>
        </member>
        <member name="F:Qiniu.Util.CRC32.IEEE">
            <summary>
            magic
            </summary>
        </member>
        <member name="M:Qiniu.Util.CRC32.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Qiniu.Util.CRC32.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入
            </summary>
            <param name="p">字节数据</param>
            <param name="offset">偏移位置</param>
            <param name="count">字节数</param>
        </member>
        <member name="M:Qiniu.Util.CRC32.Sum">
            <summary>
            校验和
            </summary>
            <returns>校验和</returns>
        </member>
        <member name="M:Qiniu.Util.CRC32.Update(System.UInt32,System.UInt32[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            更新
            </summary>
            <param name="crc">crc32</param>
            <param name="table">表</param>
            <param name="p">字节数据</param>
            <param name="offset">偏移位置</param>
            <param name="count">字节数</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.CRC32.CheckSumBytes(System.Byte[])">
            <summary>
            计算字节数据的crc32值
            </summary>
            <param name="data">二进制数据</param>
            <returns>crc32值</returns>
        </member>
        <member name="M:Qiniu.Util.CRC32.CheckSumSlice(System.Byte[],System.Int32,System.Int32)">
            <summary>
            检验
            </summary>
            <param name="data">字节数据</param>
            <param name="offset">偏移位置</param>
            <param name="count">字节数</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.Util.CRC32.checkSumFile(System.String)">
            <summary>
            计算沙盒文件的crc32值
            </summary>
            <param name="filePath">沙盒文件全路径</param>
            <returns>crc32值</returns>
        </member>
        <member name="T:Qiniu.Util.ETag">
            <summary>
            QINIU ETAG(文件hash)
            </summary>
        </member>
        <member name="M:Qiniu.Util.ETag.CalcHash(System.String)">
            <summary>
            计算文件hash(ETAG)
            </summary>
            <param name="filePath"></param>
            <returns>文件hash</returns>
        </member>
        <member name="T:Qiniu.Util.Hashing">
            <summary>
            计算hash值
            特别注意，不同平台使用的Cryptography可能略有不同，使用中如有遇到问题，请反馈
            提交您的issue到 https://github.com/qiniu/csharp-sdk
            </summary>
        </member>
        <member name="M:Qiniu.Util.Hashing.CalcSHA1(System.Byte[])">
            <summary>
            计算SHA1
            </summary>
            <param name="data">字节数据</param>
            <returns>SHA1</returns>
        </member>
        <member name="M:Qiniu.Util.Hashing.CalcMD5(System.String)">
            <summary>
            计算MD5哈希(可能需要关闭FIPS)
            </summary>
            <param name="str">待计算的字符串</param>
            <returns>MD5结果</returns>
        </member>
        <member name="M:Qiniu.Util.Hashing.CalcMD5X(System.String)">
            <summary>
            计算MD5哈希(第三方实现)
            </summary>
            <param name="str">待计算的字符串,避免FIPS-Exception</param>
            <returns>MD5结果</returns>
        </member>
        <member name="T:Qiniu.Util.StringHelper">
            <summary>
            字符串处理工具
            </summary>
        </member>
        <member name="M:Qiniu.Util.StringHelper.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            字符串连接
            </summary>
            <param name="array">字符串数组</param>
            <param name="sep">连接符</param>
            <returns>连接后字符串</returns>
        </member>
        <member name="M:Qiniu.Util.StringHelper.JsonJoin(System.Collections.Generic.IList{System.String})">
            <summary>
            以json格式连接字符串
            </summary>
            <param name="array">字符串数组</param>
            <returns>连接后字符串</returns>
        </member>
        <member name="M:Qiniu.Util.StringHelper.UrlEncode(System.String)">
            <summary>
            URL编码
            </summary>
            <param name="text">源字符串</param>
            <returns>URL编码字符串</returns>
        </member>
        <member name="M:Qiniu.Util.StringHelper.UrlFormEncode(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            URL键值对编码
            </summary>
            <param name="values">键值对</param>
            <returns>URL编码的键值对数据</returns>
        </member>
        <member name="T:Qiniu.Util.UserEnv">
            <summary>
            环境变量-用户路径
            </summary>
        </member>
        <member name="M:Qiniu.Util.UserEnv.GetHomeFolder">
            <summary>
            找到QHome目录（在用户目录下建立的"QHome"文件夹）
            </summary>
            <returns>QHOME路径</returns>
        </member>
        <member name="T:Qiniu.Http.HttpCode">
            <summary>
            HTTP 状态码
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.OK">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.PARTLY_OK">
            <summary>
            部分OK
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.BAD_REQUEST">
            <summary>
            请求错误
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.AUTHENTICATION_FAILED">
            <summary>
            认证授权失败
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.ACCESS_DENIED">
            <summary>
            拒绝访问
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.OBJECT_NOT_FOUND">
            <summary>
            资源不存在
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.CRC32_CHECK_FAILEd">
            <summary>
            CRC32校验失败
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.FILE_SIZE_EXCEED">
            <summary>
            上传文件大小超限
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.PREFETCH_FAILED">
            <summary>
            镜像回源失败
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.BAD_GATEWAY">
            <summary>
            错误网关
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.SERVER_UNAVAILABLE">
            <summary>
            服务端不可用
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.SERVER_TIME_EXCEED">
            <summary>
            服务端操作超时
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.TOO_FREQUENT_ACCESS">
            <summary>
            单个资源访问频率过高
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.CALLBACK_FAILED">
            <summary>
            回调失败
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.SERVER_OPERATION_FAILED">
            <summary>
            服务端操作失败
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.CONTENT_MODIFIED">
            <summary>
            资源内容被修改
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.FILE_NOT_EXIST">
            <summary>
            文件不存在
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.FILE_EXISTS">
            <summary>
            文件已存在
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.BUCKET_COUNT_LIMIT">
            <summary>
            空间数量已达上限
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.BUCKET_NOT_EXIST">
            <summary>
            空间或者文件不存在
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.INVALID_MARKER">
            <summary>
            列举资源(list)使用了非法的marker
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.CONTEXT_EXPIRED">
            <summary>
            在断点续上传过程中，后续上传接收地址不正确或ctx信息已过期。
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.USER_UNDEF">
            <summary>
            自定义HTTP状态码 (默认值)
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.USER_CANCELED">
            <summary>
            自定义HTTP状态码 (用户取消)
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.USER_PAUSED">
            <summary>
            自定义HTTP状态码 (用户暂停)
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.USER_RESUMED">
            <summary>
            自定义HTTP状态码 (用户继续)
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.USER_NEED_RETRY">
            <summary>
            自定义HTTP状态码 (需要重试)
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpCode.USER_EXCEPTION">
            <summary>
            自定义HTTP状态码 (异常或错误)
            </summary>
        </member>
        <member name="T:Qiniu.Http.ContentType">
            <summary>
            HTTP 内容类型(Content-Type)
            </summary>
        </member>
        <member name="F:Qiniu.Http.ContentType.TEXT_PLAIN">
            <summary>
            资源类型：普通文本
            </summary>
        </member>
        <member name="F:Qiniu.Http.ContentType.APPLICATION_JSON">
            <summary>
            资源类型：JSON字符串
            </summary>
        </member>
        <member name="F:Qiniu.Http.ContentType.APPLICATION_OCTET_STREAM">
            <summary>
            资源类型：未知类型(数据流)
            </summary>
        </member>
        <member name="F:Qiniu.Http.ContentType.WWW_FORM_URLENC">
            <summary>
            资源类型：表单数据(键值对)
            </summary>
        </member>
        <member name="F:Qiniu.Http.ContentType.MULTIPART_FORM_DATA">
            <summary>
            资源类型：多分部数据
            </summary>
        </member>
        <member name="T:Qiniu.Http.HttpResult">
            <summary>
            HTTP请求(GET,POST等)的返回消息
            </summary>
        </member>
        <member name="P:Qiniu.Http.HttpResult.Code">
            <summary>
            状态码 (200表示OK)
            </summary>
        </member>
        <member name="P:Qiniu.Http.HttpResult.Text">
            <summary>
            消息或错误文本
            </summary>
        </member>
        <member name="P:Qiniu.Http.HttpResult.Data">
            <summary>
            消息或错误(二进制格式)
            </summary>
        </member>
        <member name="P:Qiniu.Http.HttpResult.RefCode">
            <summary>
            参考代码(用户自定义)
            </summary>
        </member>
        <member name="P:Qiniu.Http.HttpResult.RefText">
            <summary>
            附加信息(用户自定义,如Exception内容)
            </summary>
        </member>
        <member name="P:Qiniu.Http.HttpResult.RefInfo">
            <summary>
            参考信息(从返回消息WebResponse的头部获取)
            </summary>
        </member>
        <member name="M:Qiniu.Http.HttpResult.#ctor">
            <summary>
            初始化(所有成员默认值，需要后续赋值)
            </summary>
        </member>
        <member name="M:Qiniu.Http.HttpResult.Shadow(Qiniu.Http.HttpResult)">
            <summary>
            对象复制
            </summary>
            <param name="hr">要复制其内容的来源</param>
        </member>
        <member name="M:Qiniu.Http.HttpResult.ToString">
            <summary>
            转换为易读或便于打印的字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.Http.HttpManager">
            <summary>
            HttpManager for .NET 4.5/4.6/Core/UWP
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpManager.TIMEOUT_DEF_SEC">
            <summary>
            HTTP超时间隔默认值(单位：秒)
            </summary>
        </member>
        <member name="F:Qiniu.Http.HttpManager.TIMEOUT_MAX_SEC">
            <summary>
            HTTP超时间隔最大值(单位：秒)
            </summary>
        </member>
        <member name="M:Qiniu.Http.HttpManager.#ctor(System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="allowAutoRedirect">是否允许HttpWebRequest的“重定向”，默认禁止</param>
        </member>
        <member name="M:Qiniu.Http.HttpManager.Finalize">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:Qiniu.Http.HttpManager.GetUserAgent">
            <summary>
            客户端标识，示例："SepcifiedClient/1.1 (Universal)"
            </summary>
            <returns>客户端标识UA</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.SetUserAgent(System.String)">
            <summary>
            设置自定义的客户端标识，示例："SepcifiedClient/1.1 (Universal)"
            如果设置为空白或者不设置，SDK会自动使用默认的UserAgent
            </summary>
            <param name="userAgent">用户自定义的UA</param>
            <returns>客户端标识UA</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.CreateFormDataBoundary">
            <summary>
            多部分表单数据(multi-part form-data)的分界(boundary)标识
            </summary>
            <returns>分界(boundary)标识字符串</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.SetTimeout(System.Int32)">
            <summary>
            设置HTTP超时间隔
            </summary>
            <param name="seconds">超时间隔，单位为秒</param>
        </member>
        <member name="M:Qiniu.Http.HttpManager.Get(System.String,System.String,System.Boolean)">
            <summary>
            HTTP-GET方法
            </summary>
            <param name="url">请求目标URL</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-GET的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.Post(System.String,System.String,System.Boolean)">
            <summary>
            HTTP-POST方法(不包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="token">令牌(凭证)[可选]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostData(System.String,System.Byte[],System.String,System.Boolean)">
            <summary>
            HTTP-POST方法(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(字节数据)</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostData(System.String,System.Byte[],System.String,System.String,System.Boolean)">
            <summary>
            HTTP-POST方法(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(字节数据)</param>
            <param name="mimeType">主体数据内容类型</param>
            <param name="token">令牌(凭证)[可选]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostJson(System.String,System.String,System.String,System.Boolean)">
            <summary>
            HTTP-POST方法(包含JSON文本的body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(JSON文本)</param>
            <param name="token">令牌(凭证)[可选]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostText(System.String,System.String,System.String,System.Boolean)">
            <summary>
            HTTP-POST方法(包含普通文本的body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(普通文本)</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostForm(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            HTTP-POST方法(包含表单数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="kvData">键值对数据</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostForm(System.String,System.String,System.String,System.Boolean)">
            <summary>
            HTTP-POST方法(包含表单数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">表单数据</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostForm(System.String,System.Byte[],System.String,System.Boolean)">
            <summary>
            HTTP-POST方法(包含表单数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">表单数据</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostMultipart(System.String,System.Byte[],System.String,System.String,System.Boolean)">
            <summary>
            HTTP-POST方法(包含多分部数据,multipart/form-data)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据</param>
            <param name="boundary">分界标志</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.GetAsync(System.String,System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-GET方法
            </summary>
            <param name="url">请求目标URL</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-GET的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostAsync(System.String,System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-POST方法(不包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="token">令牌(凭证)[可选]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostDataAsync(System.String,System.Byte[],System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-POST方法(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(字节数据)</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostDataAsync(System.String,System.Byte[],System.String,System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-POST方法(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(字节数据)</param>
            <param name="mimeType">主体数据内容类型</param>
            <param name="token">令牌(凭证)[可选]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostJsonAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-POST方法(包含JSON文本的body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(JSON文本)</param>
            <param name="token">令牌(凭证)[可选]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostTextAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-POST方法(包含普通文本的body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(普通文本)</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostFormAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-POST方法(包含表单数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="kvData">键值对数据</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostFormAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-POST方法(包含表单数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">表单数据</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostFormAsync(System.String,System.Byte[],System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-POST方法(包含表单数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">表单数据</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.PostMultipartAsync(System.String,System.Byte[],System.String,System.String,System.Boolean)">
            <summary>
            [异步async]HTTP-POST方法(包含多分部数据,multipart/form-data)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据</param>
            <param name="boundary">分界标志</param>
            <param name="token">令牌(凭证)[可选->设置为null]</param>
            <param name="binaryMode">是否以二进制模式读取响应内容(默认:否，即表示以文本方式读取)</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:Qiniu.Http.HttpManager.getHeaders(Qiniu.Http.HttpResult@,System.Net.Http.HttpResponseMessage)">
            <summary>
            获取返回信息头
            </summary>
            <param name="hr">即将被HTTP请求封装函数返回的HttpResult变量</param>
            <param name="msg">正在被读取的HTTP响应</param>
        </member>
        <member name="T:Qiniu.IO.Model.ChunkUnit">
            <summary>
            分片大小
            </summary>
        </member>
        <member name="F:Qiniu.IO.Model.ChunkUnit.U128K">
            <summary>
            128KB
            </summary>
        </member>
        <member name="F:Qiniu.IO.Model.ChunkUnit.U256K">
            <summary>
            256KB
            </summary>
        </member>
        <member name="F:Qiniu.IO.Model.ChunkUnit.U512K">
            <summary>
            512KB
            </summary>
        </member>
        <member name="F:Qiniu.IO.Model.ChunkUnit.U1024K">
            <summary>
            1MB
            </summary>
        </member>
        <member name="F:Qiniu.IO.Model.ChunkUnit.U2048K">
            <summary>
            2MB
            </summary>
        </member>
        <member name="F:Qiniu.IO.Model.ChunkUnit.U4096K">
            <summary>
            4MB
            </summary>
        </member>
        <member name="T:Qiniu.IO.Model.RCU">
            <summary>
            ChunkSize转换
            </summary>
        </member>
        <member name="M:Qiniu.IO.Model.RCU.GetChunkSize(Qiniu.IO.Model.ChunkUnit)">
            <summary>
            计算ChunkSize
            </summary>
            <param name="cu"></param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.IO.Model.RCU.GetChunkUnit(System.Int32)">
            <summary>
            计算ChunkUnit
            </summary>
            <param name="chunkSize"></param>
            <returns></returns>
        </member>
        <member name="T:Qiniu.IO.Model.PutPolicy">
            <summary>
            上传策略
            另请参阅 http://developer.qiniu.com/article/developer/security/put-policy.html
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.Scope">
            <summary>
            [必需]bucket或者bucket:key
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.Deadline">
            <summary>
            [必需]上传策略失效时刻，请使用SetExpire来设置它
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.InsertOnly">
            <summary>
            [可选]"仅新增"模式
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.SaveKey">
            <summary>
            [可选]保存文件的key
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.EndUser">
            <summary>
            [可选]终端用户
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.ReturnUrl">
            <summary>
            [可选]返回URL
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.ReturnBody">
            <summary>
            [可选]返回内容
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.CallbackUrl">
            <summary>
            [可选]回调URL
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.CallbackBody">
            <summary>
            [可选]回调内容
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.CallbackBodyType">
            <summary>
            [可选]回调内容类型
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.CallbackHost">
            <summary>
            [可选]回调host
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.CallbackFetchKey">
            <summary>
            [可选]回调fetchkey
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.PersistentOps">
            <summary>
            [可选]上传预转持久化
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.PersistentNotifyUrl">
            <summary>
            [可选]持久化结果通知
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.PersistentPipeline">
            <summary>
            [可选]私有队列
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.FsizeMin">
            <summary>
            [可选]上传文件大小限制：最小值
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.FsizeLimit">
            <summary>
            [可选]上传文件大小限制：最大值
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.DetectMime">
            <summary>
            [可选]上传时是否自动检测MIME
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.MimeLimit">
            <summary>
            [可选]上传文件MIME限制
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.PutPolicy.DeleteAfterDays">
            <summary>
            [可选]文件上传后多少天后自动删除
            </summary>
        </member>
        <member name="M:Qiniu.IO.Model.PutPolicy.SetExpires(System.Int32)">
            <summary>
            设置上传凭证有效期（配置Deadline属性）
            </summary>
            <param name="expireInSeconds"></param>
        </member>
        <member name="M:Qiniu.IO.Model.PutPolicy.ToJsonString">
            <summary>
            转换为JSON字符串
            </summary>
            <returns>JSON字符串</returns>
        </member>
        <member name="T:Qiniu.IO.Model.ResumeContext">
            <summary>
            分片上传的上下文信息
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeContext.Ctx">
            <summary>
            上下文信息
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeContext.Checksum">
            <summary>
            校验和
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeContext.Crc32">
            <summary>
            crc32校验值
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeContext.Offset">
            <summary>
            文件偏移位置
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeContext.Host">
            <summary>
            上传目的host
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeContext.Expired_At">
            <summary>
            ctx失效时刻
            </summary>
        </member>
        <member name="T:Qiniu.IO.Model.ResumeHelper">
            <summary>
            断点续上传辅助函数Load/Save
            </summary>
        </member>
        <member name="M:Qiniu.IO.Model.ResumeHelper.GetDefaultRecordKey(System.String,System.String)">
            <summary>
            生成默认的断点记录文件名称
            </summary>
            <param name="localFile">待上传的本地文件</param>
            <param name="saveKey">要保存的目标key</param>
            <returns>用于记录断点信息的文件名</returns>
        </member>
        <member name="M:Qiniu.IO.Model.ResumeHelper.Load(System.String)">
            <summary>
            尝试从从文件载入断点信息
            </summary>
            <param name="recordFile">断点记录文件</param>
            <returns>断点信息</returns>
        </member>
        <member name="M:Qiniu.IO.Model.ResumeHelper.Save(Qiniu.IO.Model.ResumeInfo,System.String)">
            <summary>
            保存断点信息到文件
            </summary>
            <param name="resumeInfo">断点信息</param>
            <param name="recordFile">断点记录文件</param>
        </member>
        <member name="M:Qiniu.IO.Model.ResumeHelper.LoadAsync(System.String)">
            <summary>
            尝试从从文件载入断点信息
            </summary>
            <param name="recordFile">断点记录文件</param>
            <returns>断点信息</returns>
        </member>
        <member name="M:Qiniu.IO.Model.ResumeHelper.SaveAsync(Qiniu.IO.Model.ResumeInfo,System.String)">
            <summary>
            保存断点信息到文件
            </summary>
            <param name="resumeInfo">断点信息</param>
            <param name="recordFile">断点记录文件</param>
        </member>
        <member name="T:Qiniu.IO.Model.ResumeInfo">
            <summary>
            分片上传的记录信息
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeInfo.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeInfo.BlockIndex">
            <summary>
            当前块编号
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeInfo.BlockCount">
            <summary>
            文件块总数
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeInfo.Contexts">
            <summary>
            上下文信息列表
            </summary>
        </member>
        <member name="P:Qiniu.IO.Model.ResumeInfo.SContexts">
            <summary>
            上下文信息列表-仅上传不确定数据流时使用，此情形下不支持“断点恢复”
            </summary>
        </member>
        <member name="T:Qiniu.IO.Model.UPTS">
            <summary>
            上传任务的状态
            </summary>
        </member>
        <member name="F:Qiniu.IO.Model.UPTS.Activated">
            <summary>
            任务状态:激活
            </summary>
        </member>
        <member name="F:Qiniu.IO.Model.UPTS.Suspended">
            <summary>
            任务状态:暂停
            </summary>
        </member>
        <member name="F:Qiniu.IO.Model.UPTS.Aborted">
            <summary>
            任务状态:退出
            </summary>
        </member>
        <member name="T:Qiniu.IO.Model.UploadController">
            <summary>
            上传任务的控制函数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Qiniu.IO.Model.UploadProgressHandler">
            <summary>
            分片上传进度处理
            </summary>
            <param name="uploadedBytes">已上传的字节数</param>
            <param name="totalBytes">文件总字节数</param>
        </member>
        <member name="T:Qiniu.IO.Model.StreamProgressHandler">
            <summary>
            数据流流上传进度处理
            </summary>
            <param name="uploadedBytes">已上传的字节数，如果设置为0或负数表示读取完毕</param>
        </member>
        <member name="T:Qiniu.IO.ResumableUploader">
            <summary>
            分片上传/断点续上传，适合于以下"情形2~3":  
            (1)网络较好并且待上传的文件体积较小时(比如100MB或更小一点)使用简单上传;
            (2)文件较大或者网络状况不理想时请使用分片上传;
            (3)文件较大并且需要支持断点续上传，请使用分片上传(断点续上传)
            上传时需要提供正确的上传凭证(由对应的上传策略生成)
            上传策略 http://developer.qiniu.com/article/developer/security/upload-token.html
            上传凭证 http://developer.qiniu.com/article/developer/security/put-policy.html
            </summary>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.#ctor(System.Boolean,Qiniu.IO.Model.ChunkUnit)">
            <summary>
            初始化
            </summary>
            <param name="uploadFromCDN">是否从CDN上传(默认否)，使用CDN上传可能会有更好的效果</param>
            <param name="chunkUnit">分片大小，默认设置为2MB</param>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFile(System.String,System.String,System.String)">
            <summary>
            分片上传，支持断点续上传
            使用默认记录文件(recordFile)和默认进度处理(progressHandler)
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFile(System.String,System.String,System.String,System.String)">
            <summary>
            分片上传，支持断点续上传
            使用默认进度处理(progressHandler)
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFile(System.String,System.String,System.String,System.String,Qiniu.IO.Model.UploadProgressHandler)">
            <summary>
            分片上传，支持断点续上传，带有自定义进度处理
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFile(System.String,System.String,System.String,System.String,Qiniu.IO.Model.UploadProgressHandler,Qiniu.IO.Model.UploadController)">
            <summary>
            分片上传，支持断点续上传，带有自定义进度处理、高级控制功能
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <param name="uploadController">上传控制(暂停/继续/退出)</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFile(System.String,System.String,System.String,System.Int32)">
            <summary>
            分片上传，支持断点续上传，检查CRC32，可自动重试
            使用默认记录文件(recordFile)和默认进度处理(progressHandler)
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="maxTry">最大尝试次数</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFile(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            分片上传，支持断点续上传，检查CRC32，可自动重试
            使用默认进度处理(progressHandler)
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="maxTry">最大尝试次数</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFile(System.String,System.String,System.String,System.String,System.Int32,Qiniu.IO.Model.UploadProgressHandler)">
            <summary>
            分片上传支持断点续上传，带有自定义进度处理，检查CRC32，可自动重试
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="maxTry">最大尝试次数</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFile(System.String,System.String,System.String,System.String,System.Int32,Qiniu.IO.Model.UploadProgressHandler,Qiniu.IO.Model.UploadController)">
            <summary>
            分片上传，支持断点续上传，带有自定义进度处理和上传控制检查CRC32，可自动重试
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="maxTry">最大尝试次数</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <param name="uploadController">上传控制(暂停/继续/退出)</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFile(System.String,System.String,System.String,System.String,System.Int32,Qiniu.IO.Model.UploadProgressHandler,Qiniu.IO.Model.UploadController,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            分片上传/断点续上传，带有自定义进度处理和上传控制，检查CRC32，可自动重试
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="maxTry">最大尝试次数</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <param name="uploadController">上传控制(暂停/继续/退出)</param>
            <param name="extraParams">用户自定义的附加参数</param>
            <returns>上传文件后返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.ReadToByteArray(System.String)">
            <summary>
            读取文件内容到byte数组中
            </summary>
            <param name="file"></param>
            <returns>存放文件内容的字节数组</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadData(System.Byte[],System.String,System.String,Qiniu.IO.Model.UploadProgressHandler)">
            <summary>
            上传数据-分片方式，不支持断点续上传。如果数据比较大或者网络状态不佳，可以使用此方式
            </summary>
            <param name="data">待上传的数据</param>
            <param name="saveKey">要保存的key</param>
            <param name="token">上传凭证</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <returns>上传数据后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadStream(System.IO.Stream,System.String,System.String,Qiniu.IO.Model.StreamProgressHandler)">
            <summary>
            上传数据流-分片方式，不支持断点续上传。如果预估数据流比较长或者网络状态不佳，可以使用此方式
            </summary>
            <param name="stream">数据流，比如FileStream等</param>
            <param name="saveKey">要保存的key</param>
            <param name="token">上传凭证</param>
            <param name="spHandler">数据流上传进度处理，设置为null则表示使用默认处理</param> 
            <returns>上传数据流后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFileAsync(System.String,System.String,System.String)">
            <summary>
            [异步async]分片上传/断点续上传，使用默认记录文件(recordFile)和默认进度处理(progressHandler)
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFileAsync(System.String,System.String,System.String,System.String)">
            <summary>
            [异步async]分片上传/断点续上传，使用默认进度处理(progressHandler)
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFileAsync(System.String,System.String,System.String,System.String,Qiniu.IO.Model.UploadProgressHandler)">
            <summary>
            [异步async]分片上传/断点续上传，带有自定义进度处理
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFileAsync(System.String,System.String,System.String,System.String,Qiniu.IO.Model.UploadProgressHandler,Qiniu.IO.Model.UploadController)">
            <summary>
            [异步async]分片上传/断点续上传，带有自定义进度处理、高级控制功能
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <param name="uploadController">上传控制(暂停/继续/退出)</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFileAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
            [异步async]分片上传/断点续上传，检查CRC32，使用默认记录文件(recordFile)和默认进度处理(progressHandler)，可自动重试
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="maxTry">最大尝试次数</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFileAsync(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            [异步async]分片上传/断点续上传，检查CRC32，使用默认进度处理(progressHandler)，可自动动重试
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="maxTry">最大尝试次数</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFileAsync(System.String,System.String,System.String,System.String,System.Int32,Qiniu.IO.Model.UploadProgressHandler)">
            <summary>
            [异步async]分片上传/断点续上传，检查CRC32，带有自定义进度处理，可自动重试
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="maxTry">最大尝试次数</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFileAsync(System.String,System.String,System.String,System.String,System.Int32,Qiniu.IO.Model.UploadProgressHandler,Qiniu.IO.Model.UploadController)">
            <summary>
            [异步async]分片上传/断点续上传，检查CRC32，带有自定义进度处理和上传控制，可自动重试
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="maxTry">最大尝试次数</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <param name="uploadController">上传控制(暂停/继续/退出)</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadFileAsync(System.String,System.String,System.String,System.String,System.Int32,Qiniu.IO.Model.UploadProgressHandler,Qiniu.IO.Model.UploadController,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            [异步async]分片上传/断点续上传，检查CRC32，带有自定义进度处理和上传控制，可自动重试
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <param name="recordFile">记录文件(记录断点信息)，必须是完整路径，例如"D:/dir/1.txt"</param>
            <param name="maxTry">最大尝试次数</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <param name="uploadController">上传控制(暂停/继续/退出)</param>
            <param name="extraParams">用户自定义的附加参数</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.ReadToByteArrayAsync(System.String)">
            <summary>
            [异步async]读取文件内容到byte数组中
            </summary>
            <param name="file"></param>
            <returns>存放文件内容的字节数组</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadDataAsync(System.Byte[],System.String,System.String,Qiniu.IO.Model.UploadProgressHandler)">
            <summary>
            [异步async]上传数据-分片方式，不支持断点续上传。如果预估数据比较大或者网络状态不佳，可以使用此方式
            </summary>
            <param name="data">待上传的数据</param>
            <param name="saveKey">要保存的key</param>
            <param name="token">上传凭证</param>
            <param name="uppHandler">上传进度处理，设置为null则表示使用默认处理</param>
            <returns>上传数据后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.UploadStreamAsync(System.IO.Stream,System.String,System.String,Qiniu.IO.Model.StreamProgressHandler)">
            <summary>
            [异步async]上传数据流-分片方式，不支持断点续上传。如果预估数据流比较长或者网络状态不佳，可以使用此方式
            </summary>
            <param name="stream">数据流，比如FileStream等</param>
            <param name="saveKey">要保存的key</param>
            <param name="token">上传凭证</param>
            <param name="spHandler">数据流上传进度处理，设置为null则表示使用默认处理</param> 
            <returns>上传数据流后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.Int64,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            根据已上传的所有分片数据创建文件，保存的文件名会自动生成
            </summary>
            <param name="size">目标文件大小</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.String,System.Int64,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            根据已上传的所有分片数据创建文件，保存的文件名会自动生成
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">目标文件大小</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.Int64,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            根据已上传的所有分片数据创建文件
            </summary>
            <param name="size">目标文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.String,System.Int64,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            根据已上传的所有分片数据创建文件
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.Int64,System.String,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            根据已上传的所有分片数据创建文件，可指定保存文件的MimeType
            </summary>
            <param name="size">目标文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="mimeType">用户指定的文件MimeType</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.String,System.Int64,System.String,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            根据已上传的所有分片数据创建文件
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="mimeType">用户指定的文件MimeType</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.Int64,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据已上传的所有分片数据创建文件
            </summary>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户指定的额外参数</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.String,System.Int64,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据已上传的所有分片数据创建文件
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户指定的额外参数</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.Int64,System.String,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据已上传的所有分片数据创建文件
            </summary>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="mimeType">用户设置的文件MimeType</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户指定的额外参数</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfile(System.String,System.Int64,System.String,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据已上传的所有分片数据创建文件
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="mimeType">用户设置的文件MimeType</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户指定的额外参数</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkblk(System.Byte[],System.Int64,System.Int64,System.String)">
            <summary>
            创建块(携带首片数据)
            </summary>
            <param name="chunkBuffer">数据片，此操作都会携带第一个数据片</param>
            <param name="blockSize">块大小，除了最后一块可能不足4MB，前面的所有数据块恒定位4MB</param>
            <param name="chunkSize">分片大小，一个块可以被分为若干片依次上传然后拼接或者不分片直接上传整块</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkblkChecked(System.Byte[],System.Int64,System.Int64,System.String)">
            <summary>
            创建块(携带首片数据),同时检查CRC32
            </summary>
            <param name="chunkBuffer">数据片，此操作都会携带第一个数据片</param>
            <param name="blockSize">块大小，除了最后一块可能不足4MB，前面的所有数据块恒定位4MB</param>
            <param name="chunkSize">分片大小，一个块可以被分为若干片依次上传然后拼接或者不分片直接上传整块</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.bput(System.Byte[],System.Int64,System.Int64,System.String,System.String)">
            <summary>
            上传数据片
            </summary>
            <param name="chunkBuffer">数据片</param>
            <param name="offset">当前片在块中的偏移位置</param>
            <param name="chunkSize">当前片的大小</param>
            <param name="context">承接前一片数据用到的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.bputChecked(System.Byte[],System.Int64,System.Int64,System.String,System.String)">
            <summary>
            上传数据片,同时检查CRC32
            </summary>
            <param name="chunkBuffer">数据片</param>
            <param name="offset">当前片在块中的偏移位置</param>
            <param name="chunkSize">当前片的大小</param>
            <param name="context">承接前一片数据用到的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.Int64,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件，保存的文件名会自动生成
            </summary>
            <param name="size">目标文件大小</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.String,System.Int64,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件，保存的文件名会自动生成
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">目标文件大小</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.Int64,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件
            </summary>
            <param name="size">目标文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.String,System.Int64,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">目标文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.Int64,System.String,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件，可指定保存文件的MimeType
            </summary>
            <param name="size">目标文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="mimeType">用户指定的文件MimeType</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.String,System.Int64,System.String,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="mimeType">用户指定的文件MimeType</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.Int64,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件
            </summary>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户指定的额外参数</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.String,System.Int64,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户指定的额外参数</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.Int64,System.String,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件
            </summary>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="mimeType">用户设置的文件MimeType</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户指定的额外参数</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkfileAsync(System.String,System.Int64,System.String,System.String,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            [异步async]根据已上传的所有分片数据创建文件
            </summary>
            <param name="fileName">源文件名</param>
            <param name="size">文件大小</param>
            <param name="saveKey">要保存的文件名</param>
            <param name="mimeType">用户设置的文件MimeType</param>
            <param name="contexts">所有数据块的Context</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户指定的额外参数</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkblkAsync(System.Byte[],System.Int64,System.Int64,System.String)">
            <summary>
            [异步async]创建块(携带首片数据)
            </summary>
            <param name="chunkBuffer">数据片，此操作都会携带第一个数据片</param>
            <param name="blockSize">块大小，除了最后一块可能不足4MB，前面的所有数据块恒定位4MB</param>
            <param name="chunkSize">分片大小，一个块可以被分为若干片依次上传然后拼接或者不分片直接上传整块</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.mkblkCheckedAsync(System.Byte[],System.Int64,System.Int64,System.String)">
            <summary>
            [异步async]创建块(携带首片数据),同时检查CRC32
            </summary>
            <param name="chunkBuffer">数据片，此操作都会携带第一个数据片</param>
            <param name="blockSize">块大小，除了最后一块可能不足4MB，前面的所有数据块恒定位4MB</param>
            <param name="chunkSize">分片大小，一个块可以被分为若干片依次上传然后拼接或者不分片直接上传整块</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.bputAsync(System.Byte[],System.Int64,System.Int64,System.String,System.String)">
            <summary>
            [异步async]上传数据片
            </summary>
            <param name="chunkBuffer">数据片</param>
            <param name="offset">当前片在块中的偏移位置</param>
            <param name="chunkSize">当前片的大小</param>
            <param name="context">承接前一片数据用到的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.bputCheckedAsync(System.Byte[],System.Int64,System.Int64,System.String,System.String)">
            <summary>
            [异步async]上传数据片,同时检查CRC32
            </summary>
            <param name="chunkBuffer">数据片</param>
            <param name="offset">当前片在块中的偏移位置</param>
            <param name="chunkSize">当前片的大小</param>
            <param name="context">承接前一片数据用到的Context</param>
            <param name="token">上传凭证</param>
            <returns>此操作执行后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.DefaultUploadProgressHandler(System.Int64,System.Int64)">
            <summary>
            默认的进度处理函数-上传文件
            </summary>
            <param name="uploadedBytes">已上传的字节数</param>
            <param name="totalBytes">文件总字节数</param>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.DefaultStreamProgressHandler(System.Int64)">
            <summary>
            默认的进度处理函数-上传数据流
            </summary>
            <param name="uploadedBytes">已上传的字节数，如果设置为0或负数表示读取完毕</param>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.DefaultUploadController">
            <summary>
            默认的上传控制函数，默认不执行任何控制
            </summary>
            <returns>控制状态</returns>
        </member>
        <member name="M:Qiniu.IO.ResumableUploader.getMaxTry(System.Int32)">
            <summary>
            设置最大尝试次数，取值范围1~20，设置为1表示仅1次机会无重试，设置为2表示第1次失败后进行下一次重试，以此类推
            </summary>
            <param name="maxTry">用户设置得最大尝试次数</param>
            <returns></returns>
        </member>
        <member name="T:Qiniu.IO.FormUploader">
            <summary>
            简单上传，适合于以下"情形1":  
            (1)网络较好并且待上传的文件体积较小时(比如100MB或更小一点)使用简单上传;
            (2)文件较大或者网络状况不理想时请使用分片上传;
            (3)文件较大并且需要支持断点续上传，请使用分片上传(断点续上传)
            上传时需要提供正确的上传凭证(由对应的上传策略生成)
            上传策略 http://developer.qiniu.com/article/developer/security/upload-token.html
            上传凭证 http://developer.qiniu.com/article/developer/security/put-policy.html
            </summary>
        </member>
        <member name="M:Qiniu.IO.FormUploader.#ctor(System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="uploadFromCDN">是否从CDN上传(默认否)，使用CDN上传可能会有更好的效果</param>
        </member>
        <member name="M:Qiniu.IO.FormUploader.UploadFile(System.String,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="localFile">待上传的本地文件</param>
            <param name="saveKey">要保存的目标文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.FormUploader.UploadFile(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            上传文件 - 可附加自定义参数
            </summary>
            <param name="localFile">待上传的本地文件</param>
            <param name="saveKey">要保存的目标文件名称</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户自定义的附加参数</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.FormUploader.ReadToByteArray(System.String)">
            <summary>
            读取文件内容到byte数组中
            </summary>
            <param name="file"></param>
            <returns>存放文件内容的字节数组</returns>
        </member>
        <member name="M:Qiniu.IO.FormUploader.UploadData(System.Byte[],System.String,System.String)">
            <summary>
            上传数据
            </summary>
            <param name="data">待上传的数据</param>
            <param name="saveKey">要保存的key</param>
            <param name="token">上传凭证</param>
            <returns>上传数据后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.FormUploader.UploadStream(System.IO.Stream,System.String,System.String)">
            <summary>
            上传数据流
            </summary>
            <param name="stream">(确定长度的)数据流</param>
            <param name="saveKey">要保存的key</param>
            <param name="token">上传凭证</param>
            <returns>上传数据流后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.FormUploader.UploadFileAsync(System.String,System.String,System.String)">
            <summary>
            [异步async]上传文件
            </summary>
            <param name="localFile">待上传的本地文件</param>
            <param name="saveKey">要保存的目标文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.FormUploader.UploadFileAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            [异步async]上传文件 - 可附加自定义参数
            </summary>
            <param name="localFile">待上传的本地文件</param>
            <param name="saveKey">要保存的目标文件名称</param>
            <param name="token">上传凭证</param>
            <param name="extraParams">用户自定义的附加参数</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.FormUploader.ReadToByteArrayAsync(System.String)">
            <summary>
            [异步async]读取文件内容到byte数组中
            </summary>
            <param name="file"></param>
            <returns>存放文件内容的字节数组</returns>
        </member>
        <member name="M:Qiniu.IO.FormUploader.UploadDataAsync(System.Byte[],System.String,System.String)">
            <summary>
            [异步async]上传字节数据
            </summary>
            <param name="data">待上传的数据</param>
            <param name="saveKey">要保存的key</param>
            <param name="token">上传凭证</param>
            <returns>上传数据后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.FormUploader.UploadStreamAsync(System.IO.Stream,System.String,System.String)">
            <summary>
            [异步async]上传数据流
            </summary>
            <param name="stream">数据流，流长度必须可确定</param>
            <param name="saveKey">要保存的key</param>
            <param name="token">上传凭证</param>
            <returns>数据流上传后的返回结果</returns>
        </member>
        <member name="T:Qiniu.IO.UploadManager">
            <summary>
            上传管理器，根据文件/数据(流)大小以及阈值设置自动选择合适的上传方式
            </summary>
        </member>
        <member name="M:Qiniu.IO.UploadManager.#ctor(System.Int64,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="putThreshold">选择简单上传或分片上传的“阈值”，默认10MB</param>
            <param name="uploadFromCDN">是否从CDN上传(默认否)，使用CDN上传可能会有更好的效果</param>
        </member>
        <member name="M:Qiniu.IO.UploadManager.SetUploadProgressHandler(Qiniu.IO.Model.UploadProgressHandler)">
            <summary>
            设置上传进度处理器-仅对于上传大文件有效，如果不设置则使用默认的进度处理器
            </summary>
            <param name="upph">上传进度处理器</param>
        </member>
        <member name="M:Qiniu.IO.UploadManager.SetStreamrogressHandler(Qiniu.IO.Model.StreamProgressHandler)">
            <summary>
            设置上传进度处理器-仅对于上传数据流有效，如果不设置则使用默认的进度处理器
            </summary>
            <param name="sph">数据流上传进度处理器</param>
        </member>
        <member name="M:Qiniu.IO.UploadManager.SetUploadController(Qiniu.IO.Model.UploadController)">
            <summary>
            设置上传控制器-仅对于上传大文件有效，如不设置则使用默认控制器
            </summary>
            <param name="upctl">上传控制器</param>
        </member>
        <member name="M:Qiniu.IO.UploadManager.SetRecordFile(System.String)">
            <summary>
            设置断点记录文件-仅对于上传大文件有效
            </summary>
            <param name="recordFile">记录文件</param>
        </member>
        <member name="M:Qiniu.IO.UploadManager.SetChunkUnit(Qiniu.IO.Model.ChunkUnit)">
            <summary>
            设置分片上传的“片”大小(单位:字节)，如过不设置则为默认的2MB
            </summary>
            <param name="chunkUnit">分片大小</param>
        </member>
        <member name="M:Qiniu.IO.UploadManager.UploadFile(System.String,System.String,System.String)">
            <summary>
            上传文件，根据文件大小以及设置的阈值(用户初始化UploadManager时可指定该值)自动选择：
            若文件大小超过设定阈值，使用ResumableUploader，否则使用FormUploader
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.UploadManager.UploadFileAsync(System.String,System.String,System.String)">
            <summary>
            [异步async]上传文件
            </summary>
            <param name="localFile">本地待上传的文件名</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.UploadManager.UploadData(System.Byte[],System.String,System.String)">
            <summary>
            上传数据
            </summary>
            <param name="data">待上传的数据</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.UploadManager.UploadStream(System.IO.Stream,System.String,System.String)">
            <summary>
            上传数据流，根据流长度以及设置的阈值(用户初始化UploadManager时可指定该值)自动选择表单或者分片上传
            </summary>
            <param name="stream">待上传的数据流，要求：流长度(Stream.Length)是确定的</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传数据后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.UploadManager.UploadDataAsync(System.Byte[],System.String,System.String)">
            <summary>
            [异步async]上传数据
            </summary>
            <param name="data">待上传的数据</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传文件后的返回结果</returns>
        </member>
        <member name="M:Qiniu.IO.UploadManager.UploadStreamAsync(System.IO.Stream,System.String,System.String)">
            <summary>
            [异步async]上传数据流，根据流长度以及设置的阈值(用户初始化UploadManager时可指定该值)自动选择表单或者分片上传
            </summary>
            <param name="stream">待上传的数据流，要求：流长度(Stream.Length)是确定的</param>
            <param name="saveKey">要保存的文件名称</param>
            <param name="token">上传凭证</param>
            <returns>上传数据后的返回结果</returns>
        </member>
        <member name="T:Qiniu.IO.DownloadManager">
            <summary>
            空间文件下载，只提供简单下载逻辑
            对于大文件下载、断点续下载等需求，可以根据实际情况自行实现
            </summary>
        </member>
        <member name="M:Qiniu.IO.DownloadManager.CreateSignedUrl(Qiniu.Util.Mac,System.String,System.Int32)">
            <summary>
            生成授权的下载链接(访问私有空间中的文件时需要使用这种链接)
            </summary>
            <param name="mac">账号(密钥)</param>
            <param name="url">(私有)空间文件的原始链接</param>
            <param name="expireInSeconds">从生成此链接的时刻算起，该链接有效时间(单位:秒)</param>
            <returns>已授权的下载链接</returns>
        </member>
        <member name="M:Qiniu.IO.DownloadManager.Download(System.String,System.String)">
            <summary>
            下载文件到本地
            </summary>
            <param name="url">(可访问的或者已授权的)链接</param>
            <param name="saveasFile">(另存为)本地文件名</param>
            <returns>下载资源的结果</returns>
        </member>
        <member name="M:Qiniu.IO.DownloadManager.DownloadAsync(System.String,System.String)">
            <summary>
            [异步async]下载文件到本地
            </summary>
            <param name="url">(可访问的或者已授权的)链接</param>
            <param name="saveasFile">(另存为)本地文件名</param>
            <returns>下载资源的结果</returns>
        </member>
        <member name="T:Qiniu.RS.Model.BatchResult">
            <summary>
            批量处理结果
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BatchResult.Error">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BatchResult.Result">
            <summary>
            获取批量处理结果
            </summary>
        </member>
        <member name="M:Qiniu.RS.Model.BatchResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串></returns>
        </member>
        <member name="T:Qiniu.RS.Model.BatchInfo">
            <summary>
            批量处理返回的信息
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BatchInfo.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BatchInfo.Data">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Qiniu.RS.Model.BucketsResult">
            <summary>
            获取空间列表-结果
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketsResult.Result">
            <summary>
            空间列表
            </summary>
        </member>
        <member name="M:Qiniu.RS.Model.BucketsResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.RS.Model.DomainsResult">
            <summary>
            获取空间域名(domains操作)的返回消息
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.DomainsResult.Result">
            <summary>
            域名(列表)
            </summary>
        </member>
        <member name="M:Qiniu.RS.Model.DomainsResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.RS.Model.FileDesc">
            <summary>
            文件描述(stat操作返回消息中包含的有效内容)
            与StatInfo一致
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.FileDesc.Key">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.FileDesc.Hash">
            <summary>
            文件hash(ETAG)
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.FileDesc.Fsize">
            <summary>
            文件大小(字节)
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.FileDesc.MimeType">
            <summary>
            文件MIME类型
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.FileDesc.PutTime">
            <summary>
            上传时间
            </summary>
        </member>
        <member name="T:Qiniu.RS.Model.ListInfo">
            <summary>
            获取空间文件(list操作)
            
            返回JSON字符串
            
            {
                "marker":"MARKER",
                "items":
                [
                    {
                        "key":"KEY",
                        "hash":"HASH",
                        "fsize":FSIZE,
                        "mimeType":"MIME_TYPE",
                        "putTime":PUT_TIME
                    },
                    {
                        ...
                    }
                ],
                "CmmonPrefixes":"COMMON_PREFIXES"
            }
            
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.ListInfo.Marker">
            <summary>
            marker标记
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.ListInfo.Items">
            <summary>
            文件列表
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.ListInfo.CommonPrefixes">
            <summary>
            公共前缀
            </summary>
        </member>
        <member name="T:Qiniu.RS.Model.ListResult">
            <summary>
            获取空间文件列表(list操作)的返回消息
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.ListResult.Result">
            <summary>
            文件列表信息
            </summary>
        </member>
        <member name="M:Qiniu.RS.Model.ListResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串></returns>
        </member>
        <member name="T:Qiniu.RS.Model.StatInfo">
            <summary>
            获取空间文件信息(stat操作)的有效内容
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.StatInfo.Fsize">
            <summary>
            文件大小(字节)
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.StatInfo.Hash">
            <summary>
            文件hash(ETAG)
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.StatInfo.MimeType">
            <summary>
            文件MIME类型
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.StatInfo.PutTime">
            <summary>
            文件上传时间
            </summary>
        </member>
        <member name="T:Qiniu.RS.Model.StatResult">
            <summary>
            获取空间文件信息(stat操作)的返回消息
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.StatResult.Result">
            <summary>
            stat信息列表
            </summary>
        </member>
        <member name="M:Qiniu.RS.Model.StatResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.RS.Model.BucketInfo">
            <summary>
            bucket info
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketInfo.tbl">
            <summary>
            bucket name
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketInfo.itbl">
            <summary>
            itbl
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketInfo.phy">
            <summary>
            deprecated
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketInfo.uid">
            <summary>
            id
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketInfo.zone">
            <summary>
            zone
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketInfo.region">
            <summary>
            region
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketInfo.global">
            <summary>
            isGlobal
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketInfo.line">
            <summary>
            isLineStorage
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketInfo.ctime">
            <summary>
            creationTime
            </summary>
        </member>
        <member name="T:Qiniu.RS.Model.BucketResult">
            <summary>
            获取bucket信息-结果
            </summary>
        </member>
        <member name="P:Qiniu.RS.Model.BucketResult.Result">
            <summary>
            bucket信息
            </summary>
        </member>
        <member name="M:Qiniu.RS.Model.BucketResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.RS.BucketManager">
            <summary>
            空间(资源)管理/操作
            </summary>
        </member>
        <member name="M:Qiniu.RS.BucketManager.#ctor(Qiniu.Util.Mac)">
            <summary>
            初始化
            </summary>
            <param name="mac">账号(密钥)</param>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Stat(System.String,System.String)">
            <summary>
            获取空间文件信息
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>文件信息获取结果</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Buckets">
            <summary>
            获取空间(bucket)列表
            </summary>
            <returns>空间列表获取结果</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Bucket(System.String)">
            <summary>
            查询指定bucket的信息
            </summary>
            <param name="bucketName">bucket名称</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Delete(System.String,System.String)">
            <summary>
            删除文件
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Copy(System.String,System.String,System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Copy(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            复制文件 (with 'force' param)
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标key</param>
            <param name="force">force标志,true/false</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Move(System.String,System.String,System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Move(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            移动文件 (with 'force' param)
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标key</param>
            <param name="force">force标志,true/false</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Rename(System.String,System.String,System.String)">
            <summary>
            修改文件名(key)
            </summary>
            <param name="bucket">文件所在空间</param>
            <param name="oldKey">旧的文件名</param>
            <param name="newKey">新的文件名</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Chgm(System.String,System.String,System.String)">
            <summary>
            修改文件MimeType
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <param name="mimeType">修改后的MIME Type</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Batch(System.String)">
            <summary>
            批处理
            </summary>
            <param name="batchOps">批量操作的操作字符串</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Batch(System.String[])">
            <summary>
            批处理，字符串数组拼接后与另一形式等价
            </summary>
            <param name="ops">批量操作的操作字符串数组</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.BatchStat(System.String,System.String[])">
            <summary>
            批处理-stat
            </summary>
            <param name="bucket">空间名称</param>
            <param name="keys">文件key列表</param>
            <returns>结果列表</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.BatchDelete(System.String,System.String[])">
            <summary>
            批处理 - delete
            </summary>
            <param name="bucket">空间名称</param>
            <param name="keys">文件key列表</param>
            <returns>结果列表</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Fetch(System.String,System.String,System.String)">
            <summary>
            抓取文件
            </summary>
            <param name="resUrl">资源URL</param>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Prefetch(System.String,System.String)">
            <summary>
            更新文件，适用于"镜像源站"设置的空间
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.Domains(System.String)">
            <summary>
            获取空间的域名
            </summary>
            <param name="bucket">空间名称</param>
            <returns>空间对应的域名</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.ListFiles(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            
            获取空间文件列表 
            listFiles(bucket, prefix, marker, limit, delimiter)
            
            bucket:    目标空间名称
            
            prefix:    返回指定文件名前缀的文件列表(prefix可设为null)
            
            marker:    考虑到设置limit后返回的文件列表可能不全(需要重复执行listFiles操作)
                       执行listFiles操作时使用marker标记来追加新的结果
                       特别注意首次执行listFiles操作时marker为null
                       
            limit:     每次返回结果所包含的文件总数限制(limit最大值1000，建议值100)
            
            delimiter: 分隔符，比如-或者/等等，可以模拟作为目录结构(参考下述示例)
                       假设指定空间中有2个文件 fakepath/1.txt fakepath/2.txt
                       现设置分隔符delimiter = / 得到返回结果items =[]，commonPrefixes = [fakepath/]
                       然后调整prefix = fakepath/ delimiter = null 得到所需结果items = [1.txt,2.txt]
                       于是可以在本地先创建一个目录fakepath,然后在该目录下写入items中的文件
                       
            </summary>
            <param name="bucket">空间名称</param>
            <param name="prefix">前缀</param>
            <param name="marker">标记</param>
            <param name="limit">数量限制</param>
            <param name="delimiter">分隔符</param>
            <returns>文件列表获取结果</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.UpdateLifecycle(System.String,System.String,System.Int32)">
            <summary>
            更新文件生命周期
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <param name="deleteAfterDays">多少天后删除</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.StatAsync(System.String,System.String)">
            <summary>
            [异步async]获取空间文件信息
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>文件信息获取结果</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.BucketsAsync">
            <summary>
            [异步async]获取空间(bucket)列表
            </summary>
            <returns>空间列表获取结果</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.BucketAsync(System.String)">
            <summary>
            [异步async]查询指定bucket的信息
            </summary>
            <param name="bucketName">bucket名称</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.DeleteAsync(System.String,System.String)">
            <summary>
            [异步async]删除文件
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.CopyAsync(System.String,System.String,System.String,System.String)">
            <summary>
            [异步async]复制文件
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.CopyAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            [异步async]复制文件 (with 'force' param)
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标key</param>
            <param name="force">force标志,true/false</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.MoveAsync(System.String,System.String,System.String,System.String)">
            <summary>
            [异步async]移动文件
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.MoveAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            [异步async]移动文件 (with 'force' param)
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标key</param>
            <param name="force">force标志,true/false</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.RenameAsync(System.String,System.String,System.String)">
            <summary>
            [异步async]修改文件名(key)
            </summary>
            <param name="bucket">文件所在空间</param>
            <param name="oldKey">旧的文件名</param>
            <param name="newKey">新的文件名</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.ChgmAsync(System.String,System.String,System.String)">
            <summary>
            [异步async]修改文件MimeType
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <param name="mimeType">修改后的MIME Type</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.BatchAsync(System.String)">
            <summary>
            [异步async]批处理
            </summary>
            <param name="batchOps">批量操作的操作字符串</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.BatchAsync(System.String[])">
            <summary>
            [异步async]批处理，字符串数组拼接后与另一形式等价
            </summary>
            <param name="ops">批量操作的操作字符串数组</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.BatchStatAsync(System.String,System.String[])">
            <summary>
            [异步async]批处理-stat
            </summary>
            <param name="bucket">空间名称</param>
            <param name="keys">文件key列表</param>
            <returns>结果列表</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.BatchDeleteAsync(System.String,System.String[])">
            <summary>
            [异步async]批处理 - delete
            </summary>
            <param name="bucket">空间名称</param>
            <param name="keys">文件key列表</param>
            <returns>结果列表</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.FetchAsync(System.String,System.String,System.String)">
            <summary>
            [异步async]抓取文件
            </summary>
            <param name="resUrl">资源URL</param>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.PrefetchAsync(System.String,System.String)">
            <summary>
            [异步async]更新文件，适用于"镜像源站"设置的空间
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.DomainsAsync(System.String)">
            <summary>
            [异步async]获取空间的域名
            </summary>
            <param name="bucket">空间名称</param>
            <returns>空间对应的域名</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.ListAsync(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            
            [异步async]获取空间文件列表 
            listFiles(bucket, prefix, marker, limit, delimiter)
            
            bucket:    目标空间名称
            
            prefix:    返回指定文件名前缀的文件列表(prefix可设为null)
            
            marker:    考虑到设置limit后返回的文件列表可能不全(需要重复执行listFiles操作)
                       执行listFiles操作时使用marker标记来追加新的结果
                       特别注意首次执行listFiles操作时marker为null
                       
            limit:     每次返回结果所包含的文件总数限制(limit最大值1000，建议值100)
            
            delimiter: 分隔符，比如-或者/等等，可以模拟作为目录结构(参考下述示例)
                       假设指定空间中有2个文件 fakepath/1.txt fakepath/2.txt
                       现设置分隔符delimiter = / 得到返回结果items =[]，commonPrefixes = [fakepath/]
                       然后调整prefix = fakepath/ delimiter = null 得到所需结果items = [1.txt,2.txt]
                       于是可以在本地先创建一个目录fakepath,然后在该目录下写入items中的文件
                       
            </summary>
            <param name="bucket">空间名称</param>
            <param name="prefix">前缀</param>
            <param name="marker">标记</param>
            <param name="limit">数量限制</param>
            <param name="delimiter">分隔符</param>
            <returns>文件列表获取结果</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.UpdateLifecycleAsync(System.String,System.String,System.Int32)">
            <summary>
            [异步async]更新文件生命周期
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <param name="deleteAfterDays">多少天后删除</param>
            <returns>状态码为200时表示OK</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.StatOp(System.String,System.String)">
            <summary>
            生成stat操作字符串
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>stat操作字符串</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.DeleteOp(System.String,System.String)">
            <summary>
            生成delete操作字符串
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>delete操作字符串</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.CopyOp(System.String,System.String,System.String,System.String)">
            <summary>
            生成copy操作字符串
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标文件key</param>
            <returns>copy操作字符串</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.CopyOp(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成copy(with 'force' param)操作字符串
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标文件key</param>
            <param name="force">force标志,true/false</param>
            <returns>copy操作字符串</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.MoveOp(System.String,System.String,System.String,System.String)">
            <summary>
            生成move操作字符串
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标文件key</param>
            <returns>move操作字符串</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.MoveOp(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成copy(with 'force' param)操作字符串
            </summary>
            <param name="srcBucket">源空间</param>
            <param name="srcKey">源文件key</param>
            <param name="dstBucket">目标空间</param>
            <param name="dstKey">目标文件key</param>
            <param name="force">force标志,true/false</param>
            <returns>move操作字符串</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.ChgmOp(System.String,System.String,System.String)">
            <summary>
            生成chgm操作字符串
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <param name="mimeType">修改后MIME Type</param>
            <returns>chgm操作字符串</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.FetchOp(System.String,System.String,System.String)">
            <summary>
            生成fetch操作字符串
            </summary>
            <param name="url">资源URL</param>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>fetch操作字符串</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.PrefetchOp(System.String,System.String)">
            <summary>
            生成prefetch操作字符串
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <returns>prefetch操作字符串</returns>
        </member>
        <member name="M:Qiniu.RS.BucketManager.UpdateLifecycleOp(System.String,System.String,System.Int32)">
            <summary>
            生成updateLifecycle操作字符串
            </summary>
            <param name="bucket">空间名称</param>
            <param name="key">文件key</param>
            <param name="deleteAfterDays">多少天后删除(设为0表示取消)</param>
            <returns>updateLifecycle操作字符串</returns>
        </member>
        <member name="T:Qiniu.RSF.Model.PfopResult">
            <summary>
            持久化
            </summary>
        </member>
        <member name="P:Qiniu.RSF.Model.PfopResult.PersistentId">
            <summary>
            此ID可用于查询持久化进度
            </summary>
        </member>
        <member name="M:Qiniu.RSF.Model.PfopResult.ToString">
            <summary>
            转换为易读字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:Qiniu.RSF.OperationManager">
            <summary>
            数据处理
            </summary>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.#ctor(Qiniu.Util.Mac)">
            <summary>
            初始化
            </summary>
            <param name="mac">账号(密钥)</param>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.Pfop(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            数据处理
            </summary>
            <param name="bucket">空间</param>
            <param name="key">空间文件的key</param>
            <param name="fops">操作(命令参数)</param>
            <param name="pipeline">私有队列</param>
            <param name="notifyUrl">通知url</param>
            <param name="force">forece参数</param>
            <returns>pfop操作返回结果，正确返回结果包含persistentId</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.Pfop(System.String,System.String,System.String[],System.String,System.String,System.Boolean)">
            <summary>
            数据处理，操作字符串拼接后与另一种形式等价
            </summary>
            <param name="bucket">空间</param>
            <param name="key">空间文件的key</param>
            <param name="fops">操作(命令参数)列表</param>
            <param name="pipeline">私有队列</param>
            <param name="notifyUrl">通知url</param>
            <param name="force">forece参数</param>
            <returns>操作返回结果，正确返回结果包含persistentId</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.Prefop(System.String)">
            <summary>
            查询pfop操作处理结果(或状态)
            </summary>
            <param name="persistentId">持久化ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.Dfop(System.String,System.String)">
            <summary>
            根据uri的类型(网络url或者本地文件路径)自动选择dfop_url或者dfop_data
            </summary>
            <param name="fop">文件处理命令</param>
            <param name="uri">资源/文件URI</param>
            <returns>操作结果/返回数据</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.DfopText(System.String,System.String)">
            <summary>
            文本处理(直接传入文本内容)
            </summary>
            <param name="fop">文本处理命令</param>
            <param name="text">文本内容</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.DfopTextFile(System.String,System.String)">
            <summary>
            文本处理(从文件读取文本)
            </summary>
            <param name="fop">文本处理命令</param>
            <param name="textFile">文本文件</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.DfopUrl(System.String,System.String)">
            <summary>
            如果uri是网络url则使用此方法
            </summary>
            <param name="fop">文件处理命令</param>
            <param name="url">资源URL</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.DfopData(System.String,System.String)">
            <summary>
            如果uri是本地文件路径则使用此方法
            </summary>
            <param name="fop">文件处理命令</param>
            <param name="localFile">文件名</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.PfopAsync(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            [异步async]数据处理
            </summary>
            <param name="bucket">空间</param>
            <param name="key">空间文件的key</param>
            <param name="fops">操作(命令参数)</param>
            <param name="pipeline">私有队列</param>
            <param name="notifyUrl">通知url</param>
            <param name="force">forece参数</param>
            <returns>pfop操作返回结果，正确返回结果包含persistentId</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.PfopAsync(System.String,System.String,System.String[],System.String,System.String,System.Boolean)">
            <summary>
            [异步async]数据处理，操作字符串拼接后与另一种形式等价
            </summary>
            <param name="bucket">空间</param>
            <param name="key">空间文件的key</param>
            <param name="fops">操作(命令参数)列表</param>
            <param name="pipeline">私有队列</param>
            <param name="notifyUrl">通知url</param>
            <param name="force">forece参数</param>
            <returns>操作返回结果，正确返回结果包含persistentId</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.PrefopAsync(System.String)">
            <summary>
            [异步async]查询pfop操作处理结果(或状态)
            </summary>
            <param name="persistentId">持久化ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.DfopAsync(System.String,System.String)">
            <summary>
            [异步async]根据uri的类型(网络url或者本地文件路径)自动选择dfop_url或者dfop_data
            </summary>
            <param name="fop">文件处理命令</param>
            <param name="uri">资源/文件URI</param>
            <returns>操作结果/返回数据</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.DfopTextAsync(System.String,System.String)">
            <summary>
            [异步async]文本处理(直接传入文本内容)
            </summary>
            <param name="fop">文本处理命令</param>
            <param name="text">文本内容</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.DfopTextFileAsync(System.String,System.String)">
            <summary>
            [异步async]文本处理(从文件读取文本)
            </summary>
            <param name="fop">文本处理命令</param>
            <param name="textFile">文本文件</param>
            <returns></returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.DfopUrlAsync(System.String,System.String)">
            <summary>
            [异步async]如果uri是网络url则使用此方法
            </summary>
            <param name="fop">文件处理命令</param>
            <param name="url">资源URL</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Qiniu.RSF.OperationManager.DfopDataAsync(System.String,System.String)">
            <summary>
            [异步async]如果uri是本地文件路径则使用此方法
            </summary>
            <param name="fop">文件处理命令</param>
            <param name="localFile">文件名</param>
            <returns>处理结果</returns>
        </member>
        <member name="T:QiniuCSharpSDK">
            <summary>
            Qiniu (Cloud) C# SDK for .NET Framework 2.0+/Core/UWP
            Modules in this SDK:
            "IO", File/Stream Uploading and Downlopading, 文件(流)上传下载;
            "RS", Resource (Bucket) Management,空间资源管理;
            "RSF", File/Data Processing, 文件/数据处理; 
            "CDN",  Fusion CDN, 融合CDN加速; 
            "Util", Utilities such as MD5 hashing, 实用工具(如MD5哈希计算等);
            "Common", Common things like Zone Configurations, 公共模块(如Zone配置等);
            "Http", HTTP Request Manager, HTTP请求管理器
            </summary>
        </member>
        <member name="F:QiniuCSharpSDK.ALIAS">
            <summary>
            SDK名称
            </summary>
        </member>
        <member name="F:QiniuCSharpSDK.RTFX">
            <summary>
            目标框架
            </summary>
        </member>
        <member name="F:QiniuCSharpSDK.VERSION">
            <summary>
            SDK版本号
            </summary>
        </member>
    </members>
</doc>
